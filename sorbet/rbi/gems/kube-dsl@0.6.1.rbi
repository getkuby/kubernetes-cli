# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `kube-dsl` gem.
# Please instead update this file by running `bin/tapioca gem kube-dsl`.

# source://kube-dsl//lib/kube-dsl.rb#1
module KubeDSL
  extend ::KubeDSL::Entrypoint
end

# source://kube-dsl//lib/kube-dsl/array_field_res.rb#2
class KubeDSL::ArrayFieldRes
  include ::KubeDSL::StringHelpers

  # @return [ArrayFieldRes] a new instance of ArrayFieldRes
  #
  # source://kube-dsl//lib/kube-dsl/array_field_res.rb#9
  def initialize(name, required, elem_res); end

  # Returns the value of attribute elem_res.
  #
  # source://kube-dsl//lib/kube-dsl/array_field_res.rb#5
  def elem_res; end

  # source://kube-dsl//lib/kube-dsl/array_field_res.rb#15
  def fields_to_ruby(inflector); end

  # Returns the value of attribute name.
  #
  # source://kube-dsl//lib/kube-dsl/array_field_res.rb#5
  def name; end

  # Returns the value of attribute required.
  #
  # source://kube-dsl//lib/kube-dsl/array_field_res.rb#5
  def required; end

  # Returns the value of attribute required.
  #
  # source://kube-dsl//lib/kube-dsl/array_field_res.rb#5
  def required?; end

  # source://kube-dsl//lib/kube-dsl/array_field_res.rb#29
  def serialize_call(inflector); end

  # source://kube-dsl//lib/kube-dsl/array_field_res.rb#22
  def validations(inflector); end

  private

  # source://kube-dsl//lib/kube-dsl/array_field_res.rb#35
  def plural_name(inflector); end
end

# source://kube-dsl//lib/kube-dsl/builder.rb#4
class KubeDSL::Builder
  include ::KubeDSL::StringHelpers

  # @return [Builder] a new instance of Builder
  #
  # source://kube-dsl//lib/kube-dsl/builder.rb#11
  def initialize(schema_dir:, output_dir:, autoload_prefix:, inflector:, dsl_namespace:, entrypoint_namespace:); end

  # Returns the value of attribute autoload_prefix.
  #
  # source://kube-dsl//lib/kube-dsl/builder.rb#7
  def autoload_prefix; end

  # Returns the value of attribute dsl_namespace.
  #
  # source://kube-dsl//lib/kube-dsl/builder.rb#8
  def dsl_namespace; end

  # source://kube-dsl//lib/kube-dsl/builder.rb#57
  def each_autoload_file(&block); end

  # source://kube-dsl//lib/kube-dsl/builder.rb#27
  def each_resource_file; end

  # source://kube-dsl//lib/kube-dsl/builder.rb#35
  def entrypoint(&block); end

  # Returns the value of attribute entrypoint_namespace.
  #
  # source://kube-dsl//lib/kube-dsl/builder.rb#8
  def entrypoint_namespace; end

  # source://kube-dsl//lib/kube-dsl/builder.rb#53
  def entrypoint_path; end

  # Returns the value of attribute inflector.
  #
  # source://kube-dsl//lib/kube-dsl/builder.rb#9
  def inflector; end

  # Returns the value of attribute output_dir.
  #
  # source://kube-dsl//lib/kube-dsl/builder.rb#7
  def output_dir; end

  # source://kube-dsl//lib/kube-dsl/builder.rb#76
  def parse_ref(ref_str); end

  # source://kube-dsl//lib/kube-dsl/builder.rb#21
  def register_resolver(*prefixes, &resolver); end

  # Returns the value of attribute resolvers.
  #
  # source://kube-dsl//lib/kube-dsl/builder.rb#9
  def resolvers; end

  # source://kube-dsl//lib/kube-dsl/builder.rb#65
  def resource_from_ref(ref); end

  # Returns the value of attribute schema_dir.
  #
  # source://kube-dsl//lib/kube-dsl/builder.rb#7
  def schema_dir; end

  private

  # source://kube-dsl//lib/kube-dsl/builder.rb#147
  def add_doc_to_resource(res, doc); end

  # source://kube-dsl//lib/kube-dsl/builder.rb#172
  def add_prop_to_resource(name, prop, res); end

  # source://kube-dsl//lib/kube-dsl/builder.rb#153
  def add_props_to_resource(properties, res); end

  # source://kube-dsl//lib/kube-dsl/builder.rb#104
  def autoload_map; end

  # source://kube-dsl//lib/kube-dsl/builder.rb#121
  def each_autoload_file_helper(amap, path, &block); end

  # source://kube-dsl//lib/kube-dsl/builder.rb#82
  def each_resource; end

  # source://kube-dsl//lib/kube-dsl/builder.rb#160
  def resolve_ref(ref_str); end

  # source://kube-dsl//lib/kube-dsl/builder.rb#224
  def resource_cache; end

  # source://kube-dsl//lib/kube-dsl/builder.rb#98
  def resources; end

  # source://kube-dsl//lib/kube-dsl/builder.rb#220
  def start_path; end
end

# source://kube-dsl//lib/kube-dsl/dsl.rb#1
module KubeDSL::DSL; end

# source://kube-dsl//lib/kube-dsl/dsl/admissionregistration.rb#1
module KubeDSL::DSL::Admissionregistration; end

# source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1.rb#1
module KubeDSL::DSL::Admissionregistration::V1; end

# source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/mutating_webhook.rb#2
class KubeDSL::DSL::Admissionregistration::V1::MutatingWebhook < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def admission_review_versions(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def client_config(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def failure_policy(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/mutating_webhook.rb#43
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def match_policy(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def namespace_selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def object_selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def reinvocation_policy(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def rule(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def rules; end

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/mutating_webhook.rb#27
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def side_effects(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def timeout_seconds(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/mutating_webhook_configuration.rb#2
class KubeDSL::DSL::Admissionregistration::V1::MutatingWebhookConfiguration < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/mutating_webhook_configuration.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/mutating_webhook_configuration.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def webhook(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def webhooks; end
end

# source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/mutating_webhook_configuration_list.rb#2
class KubeDSL::DSL::Admissionregistration::V1::MutatingWebhookConfigurationList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/mutating_webhook_configuration_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/mutating_webhook_configuration_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/rule_with_operations.rb#2
class KubeDSL::DSL::Admissionregistration::V1::RuleWithOperations < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def api_groups(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def api_versions(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/rule_with_operations.rb#25
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def operations(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def resources(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def scope(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/rule_with_operations.rb#15
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/service_reference.rb#2
class KubeDSL::DSL::Admissionregistration::V1::ServiceReference < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/service_reference.rb#22
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def namespace(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def path(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def port(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/service_reference.rb#13
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/validating_webhook.rb#2
class KubeDSL::DSL::Admissionregistration::V1::ValidatingWebhook < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def admission_review_versions(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def client_config(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def failure_policy(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/validating_webhook.rb#40
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def match_policy(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def namespace_selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def object_selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def rule(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def rules; end

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/validating_webhook.rb#25
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def side_effects(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def timeout_seconds(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/validating_webhook_configuration.rb#2
class KubeDSL::DSL::Admissionregistration::V1::ValidatingWebhookConfiguration < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/validating_webhook_configuration.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/validating_webhook_configuration.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def webhook(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def webhooks; end
end

# source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/validating_webhook_configuration_list.rb#2
class KubeDSL::DSL::Admissionregistration::V1::ValidatingWebhookConfigurationList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/validating_webhook_configuration_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/validating_webhook_configuration_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/webhook_client_config.rb#2
class KubeDSL::DSL::Admissionregistration::V1::WebhookClientConfig < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def ca_bundle(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/webhook_client_config.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1/webhook_client_config.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def service(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def url(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1beta1.rb#1
module KubeDSL::DSL::Admissionregistration::V1beta1; end

# source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1beta1/mutating_webhook.rb#2
class KubeDSL::DSL::Admissionregistration::V1beta1::MutatingWebhook < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def admission_review_versions(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def client_config(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def failure_policy(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1beta1/mutating_webhook.rb#43
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def match_policy(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def namespace_selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def object_selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def reinvocation_policy(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def rule(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def rules; end

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1beta1/mutating_webhook.rb#27
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def side_effects(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def timeout_seconds(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1beta1/mutating_webhook_configuration.rb#2
class KubeDSL::DSL::Admissionregistration::V1beta1::MutatingWebhookConfiguration < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1beta1/mutating_webhook_configuration.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1beta1/mutating_webhook_configuration.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def webhook(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def webhooks; end
end

# source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1beta1/mutating_webhook_configuration_list.rb#2
class KubeDSL::DSL::Admissionregistration::V1beta1::MutatingWebhookConfigurationList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1beta1/mutating_webhook_configuration_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1beta1/mutating_webhook_configuration_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1beta1/rule_with_operations.rb#2
class KubeDSL::DSL::Admissionregistration::V1beta1::RuleWithOperations < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def api_groups(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def api_versions(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1beta1/rule_with_operations.rb#25
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def operations(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def resources(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def scope(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1beta1/rule_with_operations.rb#15
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1beta1/service_reference.rb#2
class KubeDSL::DSL::Admissionregistration::V1beta1::ServiceReference < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1beta1/service_reference.rb#22
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def namespace(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def path(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def port(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1beta1/service_reference.rb#13
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1beta1/validating_webhook.rb#2
class KubeDSL::DSL::Admissionregistration::V1beta1::ValidatingWebhook < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def admission_review_versions(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def client_config(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def failure_policy(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1beta1/validating_webhook.rb#40
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def match_policy(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def namespace_selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def object_selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def rule(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def rules; end

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1beta1/validating_webhook.rb#25
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def side_effects(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def timeout_seconds(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1beta1/validating_webhook_configuration.rb#2
class KubeDSL::DSL::Admissionregistration::V1beta1::ValidatingWebhookConfiguration < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1beta1/validating_webhook_configuration.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1beta1/validating_webhook_configuration.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def webhook(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def webhooks; end
end

# source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1beta1/validating_webhook_configuration_list.rb#2
class KubeDSL::DSL::Admissionregistration::V1beta1::ValidatingWebhookConfigurationList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1beta1/validating_webhook_configuration_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1beta1/validating_webhook_configuration_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1beta1/webhook_client_config.rb#2
class KubeDSL::DSL::Admissionregistration::V1beta1::WebhookClientConfig < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def ca_bundle(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1beta1/webhook_client_config.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/admissionregistration/v1beta1/webhook_client_config.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def service(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def url(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions.rb#1
module KubeDSL::DSL::Apiextensions; end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1.rb#1
module KubeDSL::DSL::Apiextensions::V1; end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_column_definition.rb#2
class KubeDSL::DSL::Apiextensions::V1::CustomResourceColumnDefinition < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def description(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def format(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def json_path(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_column_definition.rb#28
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def priority(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_column_definition.rb#17
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_conversion.rb#2
class KubeDSL::DSL::Apiextensions::V1::CustomResourceConversion < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_conversion.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_conversion.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def strategy(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def webhook(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_definition_condition.rb#2
class KubeDSL::DSL::Apiextensions::V1::CustomResourceDefinitionCondition < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_definition_condition.rb#25
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def last_transition_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_definition_condition.rb#15
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def status(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_definition_names.rb#2
class KubeDSL::DSL::Apiextensions::V1::CustomResourceDefinitionNames < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def categories(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def kind(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_definition_names.rb#28
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def list_kind(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def plural(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_definition_names.rb#17
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def short_names(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def singular(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_definition_status.rb#2
class KubeDSL::DSL::Apiextensions::V1::CustomResourceDefinitionStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def accepted_names(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def condition(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def conditions; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_definition_status.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_definition_status.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def stored_versions(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_subresource_scale.rb#2
class KubeDSL::DSL::Apiextensions::V1::CustomResourceSubresourceScale < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_subresource_scale.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def label_selector_path(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_subresource_scale.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def spec_replicas_path(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def status_replicas_path(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_subresources.rb#2
class KubeDSL::DSL::Apiextensions::V1::CustomResourceSubresources < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_subresources.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def scale(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/custom_resource_subresources.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def status(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/external_documentation.rb#2
class KubeDSL::DSL::Apiextensions::V1::ExternalDocumentation < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def description(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/external_documentation.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/external_documentation.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def url(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/service_reference.rb#2
class KubeDSL::DSL::Apiextensions::V1::ServiceReference < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/service_reference.rb#22
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def namespace(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def path(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def port(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/service_reference.rb#13
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/webhook_client_config.rb#2
class KubeDSL::DSL::Apiextensions::V1::WebhookClientConfig < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def ca_bundle(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/webhook_client_config.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/webhook_client_config.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def service(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def url(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/webhook_conversion.rb#2
class KubeDSL::DSL::Apiextensions::V1::WebhookConversion < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def client_config(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def conversion_review_versions(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/webhook_conversion.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1/webhook_conversion.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1beta1.rb#1
module KubeDSL::DSL::Apiextensions::V1beta1; end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1beta1/custom_resource_column_definition.rb#2
class KubeDSL::DSL::Apiextensions::V1beta1::CustomResourceColumnDefinition < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def description(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def format(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def json_path(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1beta1/custom_resource_column_definition.rb#28
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def priority(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1beta1/custom_resource_column_definition.rb#17
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1beta1/custom_resource_conversion.rb#2
class KubeDSL::DSL::Apiextensions::V1beta1::CustomResourceConversion < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def conversion_review_versions(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1beta1/custom_resource_conversion.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1beta1/custom_resource_conversion.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def strategy(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def webhook_client_config(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1beta1/custom_resource_definition_condition.rb#2
class KubeDSL::DSL::Apiextensions::V1beta1::CustomResourceDefinitionCondition < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1beta1/custom_resource_definition_condition.rb#25
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def last_transition_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1beta1/custom_resource_definition_condition.rb#15
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def status(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1beta1/custom_resource_definition_names.rb#2
class KubeDSL::DSL::Apiextensions::V1beta1::CustomResourceDefinitionNames < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def categories(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def kind(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1beta1/custom_resource_definition_names.rb#28
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def list_kind(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def plural(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1beta1/custom_resource_definition_names.rb#17
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def short_names(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def singular(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1beta1/custom_resource_definition_status.rb#2
class KubeDSL::DSL::Apiextensions::V1beta1::CustomResourceDefinitionStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def accepted_names(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def condition(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def conditions; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1beta1/custom_resource_definition_status.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1beta1/custom_resource_definition_status.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def stored_versions(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1beta1/custom_resource_subresource_scale.rb#2
class KubeDSL::DSL::Apiextensions::V1beta1::CustomResourceSubresourceScale < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1beta1/custom_resource_subresource_scale.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def label_selector_path(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1beta1/custom_resource_subresource_scale.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def spec_replicas_path(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def status_replicas_path(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1beta1/custom_resource_subresources.rb#2
class KubeDSL::DSL::Apiextensions::V1beta1::CustomResourceSubresources < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1beta1/custom_resource_subresources.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def scale(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1beta1/custom_resource_subresources.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def status(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1beta1/external_documentation.rb#2
class KubeDSL::DSL::Apiextensions::V1beta1::ExternalDocumentation < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def description(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1beta1/external_documentation.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1beta1/external_documentation.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def url(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1beta1/service_reference.rb#2
class KubeDSL::DSL::Apiextensions::V1beta1::ServiceReference < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1beta1/service_reference.rb#22
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def namespace(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def path(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def port(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1beta1/service_reference.rb#13
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1beta1/webhook_client_config.rb#2
class KubeDSL::DSL::Apiextensions::V1beta1::WebhookClientConfig < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def ca_bundle(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1beta1/webhook_client_config.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiextensions/v1beta1/webhook_client_config.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def service(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def url(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiregistration.rb#1
module KubeDSL::DSL::Apiregistration; end

# source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1.rb#1
module KubeDSL::DSL::Apiregistration::V1; end

# source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1/api_service.rb#2
class KubeDSL::DSL::Apiregistration::V1::APIService < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1/api_service.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1/api_service.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def status(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1/api_service_condition.rb#2
class KubeDSL::DSL::Apiregistration::V1::APIServiceCondition < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1/api_service_condition.rb#25
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def last_transition_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1/api_service_condition.rb#15
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def status(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1/api_service_list.rb#2
class KubeDSL::DSL::Apiregistration::V1::APIServiceList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1/api_service_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1/api_service_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1/api_service_spec.rb#2
class KubeDSL::DSL::Apiregistration::V1::APIServiceSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def ca_bundle(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def group(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def group_priority_minimum(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def insecure_skip_tls_verify(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1/api_service_spec.rb#31
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1/api_service_spec.rb#19
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def service(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def version(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def version_priority(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1/api_service_status.rb#2
class KubeDSL::DSL::Apiregistration::V1::APIServiceStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def condition(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def conditions; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1/api_service_status.rb#13
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1/api_service_status.rb#7
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1/service_reference.rb#2
class KubeDSL::DSL::Apiregistration::V1::ServiceReference < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1/service_reference.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def namespace(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def port(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1/service_reference.rb#11
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1beta1.rb#1
module KubeDSL::DSL::Apiregistration::V1beta1; end

# source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1beta1/api_service.rb#2
class KubeDSL::DSL::Apiregistration::V1beta1::APIService < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1beta1/api_service.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1beta1/api_service.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def status(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1beta1/api_service_condition.rb#2
class KubeDSL::DSL::Apiregistration::V1beta1::APIServiceCondition < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1beta1/api_service_condition.rb#25
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def last_transition_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1beta1/api_service_condition.rb#15
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def status(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1beta1/api_service_list.rb#2
class KubeDSL::DSL::Apiregistration::V1beta1::APIServiceList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1beta1/api_service_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1beta1/api_service_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1beta1/api_service_spec.rb#2
class KubeDSL::DSL::Apiregistration::V1beta1::APIServiceSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def ca_bundle(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def group(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def group_priority_minimum(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def insecure_skip_tls_verify(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1beta1/api_service_spec.rb#31
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1beta1/api_service_spec.rb#19
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def service(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def version(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def version_priority(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1beta1/api_service_status.rb#2
class KubeDSL::DSL::Apiregistration::V1beta1::APIServiceStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def condition(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def conditions; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1beta1/api_service_status.rb#13
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1beta1/api_service_status.rb#7
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1beta1/service_reference.rb#2
class KubeDSL::DSL::Apiregistration::V1beta1::ServiceReference < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1beta1/service_reference.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def namespace(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def port(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apiregistration/v1beta1/service_reference.rb#11
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps.rb#1
module KubeDSL::DSL::Apps; end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1.rb#1
module KubeDSL::DSL::Apps::V1; end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/controller_revision.rb#2
class KubeDSL::DSL::Apps::V1::ControllerRevision < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def data(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/controller_revision.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def revision(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/controller_revision.rb#11
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/controller_revision_list.rb#2
class KubeDSL::DSL::Apps::V1::ControllerRevisionList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/controller_revision_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/controller_revision_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/daemon_set.rb#2
class KubeDSL::DSL::Apps::V1::DaemonSet < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/daemon_set.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/daemon_set.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def status(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/daemon_set_condition.rb#2
class KubeDSL::DSL::Apps::V1::DaemonSetCondition < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/daemon_set_condition.rb#25
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def last_transition_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/daemon_set_condition.rb#15
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def status(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/daemon_set_list.rb#2
class KubeDSL::DSL::Apps::V1::DaemonSetList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/daemon_set_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/daemon_set_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/daemon_set_spec.rb#2
class KubeDSL::DSL::Apps::V1::DaemonSetSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/daemon_set_spec.rb#25
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def min_ready_seconds(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def revision_history_limit(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/daemon_set_spec.rb#15
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def template(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def update_strategy(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/daemon_set_status.rb#2
class KubeDSL::DSL::Apps::V1::DaemonSetStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def collision_count(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def condition(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def conditions; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def current_number_scheduled(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def desired_number_scheduled(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/daemon_set_status.rb#40
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def number_available(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def number_misscheduled(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def number_ready(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def number_unavailable(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def observed_generation(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/daemon_set_status.rb#25
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def updated_number_scheduled(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/daemon_set_update_strategy.rb#2
class KubeDSL::DSL::Apps::V1::DaemonSetUpdateStrategy < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/daemon_set_update_strategy.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def rolling_update(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/daemon_set_update_strategy.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/deployment.rb#2
class KubeDSL::DSL::Apps::V1::Deployment < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/deployment.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/deployment.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def status(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/deployment_condition.rb#2
class KubeDSL::DSL::Apps::V1::DeploymentCondition < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/deployment_condition.rb#28
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def last_transition_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def last_update_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/deployment_condition.rb#17
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def status(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/deployment_list.rb#2
class KubeDSL::DSL::Apps::V1::DeploymentList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/deployment_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/deployment_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/deployment_spec.rb#2
class KubeDSL::DSL::Apps::V1::DeploymentSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/deployment_spec.rb#34
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def min_ready_seconds(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def paused(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def progress_deadline_seconds(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def revision_history_limit(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/deployment_spec.rb#21
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def strategy(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def template(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/deployment_status.rb#2
class KubeDSL::DSL::Apps::V1::DeploymentStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def available_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def collision_count(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def condition(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def conditions; end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/deployment_status.rb#34
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def observed_generation(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def ready_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/deployment_status.rb#21
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def unavailable_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def updated_replicas(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/deployment_strategy.rb#2
class KubeDSL::DSL::Apps::V1::DeploymentStrategy < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/deployment_strategy.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def rolling_update(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/deployment_strategy.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/replica_set.rb#2
class KubeDSL::DSL::Apps::V1::ReplicaSet < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/replica_set.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/replica_set.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def status(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/replica_set_condition.rb#2
class KubeDSL::DSL::Apps::V1::ReplicaSetCondition < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/replica_set_condition.rb#25
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def last_transition_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/replica_set_condition.rb#15
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def status(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/replica_set_list.rb#2
class KubeDSL::DSL::Apps::V1::ReplicaSetList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/replica_set_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/replica_set_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/replica_set_spec.rb#2
class KubeDSL::DSL::Apps::V1::ReplicaSetSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/replica_set_spec.rb#22
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def min_ready_seconds(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/replica_set_spec.rb#13
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def template(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/replica_set_status.rb#2
class KubeDSL::DSL::Apps::V1::ReplicaSetStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def available_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def condition(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def conditions; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def fully_labeled_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/replica_set_status.rb#28
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def observed_generation(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def ready_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/replica_set_status.rb#17
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/rolling_update_daemon_set.rb#2
class KubeDSL::DSL::Apps::V1::RollingUpdateDaemonSet < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/rolling_update_daemon_set.rb#13
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def max_unavailable(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/rolling_update_daemon_set.rb#7
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/rolling_update_deployment.rb#2
class KubeDSL::DSL::Apps::V1::RollingUpdateDeployment < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/rolling_update_deployment.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def max_surge(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def max_unavailable(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/rolling_update_deployment.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/rolling_update_stateful_set_strategy.rb#2
class KubeDSL::DSL::Apps::V1::RollingUpdateStatefulSetStrategy < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/rolling_update_stateful_set_strategy.rb#13
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def partition(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/rolling_update_stateful_set_strategy.rb#7
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/stateful_set.rb#2
class KubeDSL::DSL::Apps::V1::StatefulSet < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/stateful_set.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/stateful_set.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def status(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/stateful_set_condition.rb#2
class KubeDSL::DSL::Apps::V1::StatefulSetCondition < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/stateful_set_condition.rb#25
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def last_transition_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/stateful_set_condition.rb#15
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def status(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/stateful_set_list.rb#2
class KubeDSL::DSL::Apps::V1::StatefulSetList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/stateful_set_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/stateful_set_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/stateful_set_spec.rb#2
class KubeDSL::DSL::Apps::V1::StatefulSetSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/stateful_set_spec.rb#34
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def pod_management_policy(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def revision_history_limit(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/stateful_set_spec.rb#21
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def service_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def template(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def update_strategy(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def volume_claim_template(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def volume_claim_templates; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/stateful_set_status.rb#2
class KubeDSL::DSL::Apps::V1::StatefulSetStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def collision_count(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def condition(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def conditions; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def current_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def current_revision(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/stateful_set_status.rb#37
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def observed_generation(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def ready_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/stateful_set_status.rb#23
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def update_revision(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def updated_replicas(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1/stateful_set_update_strategy.rb#2
class KubeDSL::DSL::Apps::V1::StatefulSetUpdateStrategy < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/stateful_set_update_strategy.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def rolling_update(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1/stateful_set_update_strategy.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1.rb#1
module KubeDSL::DSL::Apps::V1beta1; end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1/controller_revision.rb#2
class KubeDSL::DSL::Apps::V1beta1::ControllerRevision < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def data(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1/controller_revision.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def revision(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1/controller_revision.rb#11
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1/controller_revision_list.rb#2
class KubeDSL::DSL::Apps::V1beta1::ControllerRevisionList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1/controller_revision_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1/controller_revision_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1/deployment.rb#2
class KubeDSL::DSL::Apps::V1beta1::Deployment < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1/deployment.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1/deployment.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def status(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1/deployment_condition.rb#2
class KubeDSL::DSL::Apps::V1beta1::DeploymentCondition < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1/deployment_condition.rb#28
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def last_transition_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def last_update_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1/deployment_condition.rb#17
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def status(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1/deployment_list.rb#2
class KubeDSL::DSL::Apps::V1beta1::DeploymentList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1/deployment_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1/deployment_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1/deployment_rollback.rb#2
class KubeDSL::DSL::Apps::V1beta1::DeploymentRollback < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1/deployment_rollback.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def rollback_to(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1/deployment_rollback.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#46
  def updated_annotations(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1/deployment_spec.rb#2
class KubeDSL::DSL::Apps::V1beta1::DeploymentSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1/deployment_spec.rb#37
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def min_ready_seconds(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def paused(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def progress_deadline_seconds(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def revision_history_limit(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def rollback_to(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1/deployment_spec.rb#23
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def strategy(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def template(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1/deployment_status.rb#2
class KubeDSL::DSL::Apps::V1beta1::DeploymentStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def available_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def collision_count(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def condition(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def conditions; end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1/deployment_status.rb#34
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def observed_generation(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def ready_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1/deployment_status.rb#21
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def unavailable_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def updated_replicas(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1/deployment_strategy.rb#2
class KubeDSL::DSL::Apps::V1beta1::DeploymentStrategy < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1/deployment_strategy.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def rolling_update(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1/deployment_strategy.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1/rollback_config.rb#2
class KubeDSL::DSL::Apps::V1beta1::RollbackConfig < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1/rollback_config.rb#13
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def revision(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1/rollback_config.rb#7
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1/rolling_update_deployment.rb#2
class KubeDSL::DSL::Apps::V1beta1::RollingUpdateDeployment < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1/rolling_update_deployment.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def max_surge(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def max_unavailable(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1/rolling_update_deployment.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1/rolling_update_stateful_set_strategy.rb#2
class KubeDSL::DSL::Apps::V1beta1::RollingUpdateStatefulSetStrategy < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1/rolling_update_stateful_set_strategy.rb#13
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def partition(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1/rolling_update_stateful_set_strategy.rb#7
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1/scale.rb#2
class KubeDSL::DSL::Apps::V1beta1::Scale < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1/scale.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1/scale.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def status(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1/scale_spec.rb#2
class KubeDSL::DSL::Apps::V1beta1::ScaleSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1/scale_spec.rb#13
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1/scale_spec.rb#7
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1/scale_status.rb#2
class KubeDSL::DSL::Apps::V1beta1::ScaleStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1/scale_status.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#46
  def selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1/scale_status.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def target_selector(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1/stateful_set.rb#2
class KubeDSL::DSL::Apps::V1beta1::StatefulSet < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1/stateful_set.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1/stateful_set.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def status(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1/stateful_set_condition.rb#2
class KubeDSL::DSL::Apps::V1beta1::StatefulSetCondition < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1/stateful_set_condition.rb#25
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def last_transition_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1/stateful_set_condition.rb#15
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def status(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1/stateful_set_list.rb#2
class KubeDSL::DSL::Apps::V1beta1::StatefulSetList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1/stateful_set_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1/stateful_set_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1/stateful_set_spec.rb#2
class KubeDSL::DSL::Apps::V1beta1::StatefulSetSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1/stateful_set_spec.rb#34
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def pod_management_policy(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def revision_history_limit(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1/stateful_set_spec.rb#21
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def service_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def template(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def update_strategy(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def volume_claim_template(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def volume_claim_templates; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1/stateful_set_status.rb#2
class KubeDSL::DSL::Apps::V1beta1::StatefulSetStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def collision_count(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def condition(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def conditions; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def current_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def current_revision(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1/stateful_set_status.rb#37
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def observed_generation(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def ready_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1/stateful_set_status.rb#23
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def update_revision(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def updated_replicas(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1/stateful_set_update_strategy.rb#2
class KubeDSL::DSL::Apps::V1beta1::StatefulSetUpdateStrategy < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1/stateful_set_update_strategy.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def rolling_update(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta1/stateful_set_update_strategy.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2.rb#1
module KubeDSL::DSL::Apps::V1beta2; end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/controller_revision.rb#2
class KubeDSL::DSL::Apps::V1beta2::ControllerRevision < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def data(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/controller_revision.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def revision(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/controller_revision.rb#11
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/controller_revision_list.rb#2
class KubeDSL::DSL::Apps::V1beta2::ControllerRevisionList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/controller_revision_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/controller_revision_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/daemon_set.rb#2
class KubeDSL::DSL::Apps::V1beta2::DaemonSet < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/daemon_set.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/daemon_set.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def status(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/daemon_set_condition.rb#2
class KubeDSL::DSL::Apps::V1beta2::DaemonSetCondition < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/daemon_set_condition.rb#25
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def last_transition_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/daemon_set_condition.rb#15
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def status(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/daemon_set_list.rb#2
class KubeDSL::DSL::Apps::V1beta2::DaemonSetList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/daemon_set_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/daemon_set_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/daemon_set_spec.rb#2
class KubeDSL::DSL::Apps::V1beta2::DaemonSetSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/daemon_set_spec.rb#25
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def min_ready_seconds(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def revision_history_limit(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/daemon_set_spec.rb#15
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def template(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def update_strategy(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/daemon_set_status.rb#2
class KubeDSL::DSL::Apps::V1beta2::DaemonSetStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def collision_count(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def condition(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def conditions; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def current_number_scheduled(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def desired_number_scheduled(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/daemon_set_status.rb#40
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def number_available(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def number_misscheduled(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def number_ready(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def number_unavailable(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def observed_generation(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/daemon_set_status.rb#25
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def updated_number_scheduled(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/daemon_set_update_strategy.rb#2
class KubeDSL::DSL::Apps::V1beta2::DaemonSetUpdateStrategy < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/daemon_set_update_strategy.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def rolling_update(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/daemon_set_update_strategy.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/deployment.rb#2
class KubeDSL::DSL::Apps::V1beta2::Deployment < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/deployment.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/deployment.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def status(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/deployment_condition.rb#2
class KubeDSL::DSL::Apps::V1beta2::DeploymentCondition < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/deployment_condition.rb#28
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def last_transition_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def last_update_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/deployment_condition.rb#17
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def status(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/deployment_list.rb#2
class KubeDSL::DSL::Apps::V1beta2::DeploymentList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/deployment_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/deployment_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/deployment_spec.rb#2
class KubeDSL::DSL::Apps::V1beta2::DeploymentSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/deployment_spec.rb#34
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def min_ready_seconds(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def paused(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def progress_deadline_seconds(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def revision_history_limit(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/deployment_spec.rb#21
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def strategy(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def template(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/deployment_status.rb#2
class KubeDSL::DSL::Apps::V1beta2::DeploymentStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def available_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def collision_count(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def condition(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def conditions; end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/deployment_status.rb#34
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def observed_generation(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def ready_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/deployment_status.rb#21
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def unavailable_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def updated_replicas(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/deployment_strategy.rb#2
class KubeDSL::DSL::Apps::V1beta2::DeploymentStrategy < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/deployment_strategy.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def rolling_update(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/deployment_strategy.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/replica_set.rb#2
class KubeDSL::DSL::Apps::V1beta2::ReplicaSet < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/replica_set.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/replica_set.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def status(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/replica_set_condition.rb#2
class KubeDSL::DSL::Apps::V1beta2::ReplicaSetCondition < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/replica_set_condition.rb#25
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def last_transition_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/replica_set_condition.rb#15
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def status(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/replica_set_list.rb#2
class KubeDSL::DSL::Apps::V1beta2::ReplicaSetList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/replica_set_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/replica_set_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/replica_set_spec.rb#2
class KubeDSL::DSL::Apps::V1beta2::ReplicaSetSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/replica_set_spec.rb#22
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def min_ready_seconds(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/replica_set_spec.rb#13
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def template(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/replica_set_status.rb#2
class KubeDSL::DSL::Apps::V1beta2::ReplicaSetStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def available_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def condition(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def conditions; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def fully_labeled_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/replica_set_status.rb#28
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def observed_generation(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def ready_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/replica_set_status.rb#17
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/rolling_update_daemon_set.rb#2
class KubeDSL::DSL::Apps::V1beta2::RollingUpdateDaemonSet < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/rolling_update_daemon_set.rb#13
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def max_unavailable(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/rolling_update_daemon_set.rb#7
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/rolling_update_deployment.rb#2
class KubeDSL::DSL::Apps::V1beta2::RollingUpdateDeployment < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/rolling_update_deployment.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def max_surge(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def max_unavailable(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/rolling_update_deployment.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/rolling_update_stateful_set_strategy.rb#2
class KubeDSL::DSL::Apps::V1beta2::RollingUpdateStatefulSetStrategy < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/rolling_update_stateful_set_strategy.rb#13
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def partition(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/rolling_update_stateful_set_strategy.rb#7
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/scale.rb#2
class KubeDSL::DSL::Apps::V1beta2::Scale < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/scale.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/scale.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def status(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/scale_spec.rb#2
class KubeDSL::DSL::Apps::V1beta2::ScaleSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/scale_spec.rb#13
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/scale_spec.rb#7
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/scale_status.rb#2
class KubeDSL::DSL::Apps::V1beta2::ScaleStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/scale_status.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#46
  def selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/scale_status.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def target_selector(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/stateful_set.rb#2
class KubeDSL::DSL::Apps::V1beta2::StatefulSet < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/stateful_set.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/stateful_set.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def status(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/stateful_set_condition.rb#2
class KubeDSL::DSL::Apps::V1beta2::StatefulSetCondition < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/stateful_set_condition.rb#25
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def last_transition_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/stateful_set_condition.rb#15
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def status(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/stateful_set_list.rb#2
class KubeDSL::DSL::Apps::V1beta2::StatefulSetList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/stateful_set_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/stateful_set_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/stateful_set_spec.rb#2
class KubeDSL::DSL::Apps::V1beta2::StatefulSetSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/stateful_set_spec.rb#34
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def pod_management_policy(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def revision_history_limit(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/stateful_set_spec.rb#21
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def service_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def template(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def update_strategy(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def volume_claim_template(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def volume_claim_templates; end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/stateful_set_status.rb#2
class KubeDSL::DSL::Apps::V1beta2::StatefulSetStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def collision_count(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def condition(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def conditions; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def current_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def current_revision(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/stateful_set_status.rb#37
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def observed_generation(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def ready_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/stateful_set_status.rb#23
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def update_revision(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def updated_replicas(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/stateful_set_update_strategy.rb#2
class KubeDSL::DSL::Apps::V1beta2::StatefulSetUpdateStrategy < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/stateful_set_update_strategy.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def rolling_update(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/apps/v1beta2/stateful_set_update_strategy.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/auditregistration.rb#1
module KubeDSL::DSL::Auditregistration; end

# source://kube-dsl//lib/kube-dsl/dsl/auditregistration/v1alpha1.rb#1
module KubeDSL::DSL::Auditregistration::V1alpha1; end

# source://kube-dsl//lib/kube-dsl/dsl/auditregistration/v1alpha1/audit_sink.rb#2
class KubeDSL::DSL::Auditregistration::V1alpha1::AuditSink < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/auditregistration/v1alpha1/audit_sink.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/auditregistration/v1alpha1/audit_sink.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/auditregistration/v1alpha1/audit_sink_list.rb#2
class KubeDSL::DSL::Auditregistration::V1alpha1::AuditSinkList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/auditregistration/v1alpha1/audit_sink_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/auditregistration/v1alpha1/audit_sink_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/auditregistration/v1alpha1/audit_sink_spec.rb#2
class KubeDSL::DSL::Auditregistration::V1alpha1::AuditSinkSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/auditregistration/v1alpha1/audit_sink_spec.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def policy(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/auditregistration/v1alpha1/audit_sink_spec.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def webhook(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/auditregistration/v1alpha1/policy.rb#2
class KubeDSL::DSL::Auditregistration::V1alpha1::Policy < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/auditregistration/v1alpha1/policy.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def level(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/auditregistration/v1alpha1/policy.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def stages(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/auditregistration/v1alpha1/service_reference.rb#2
class KubeDSL::DSL::Auditregistration::V1alpha1::ServiceReference < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/auditregistration/v1alpha1/service_reference.rb#22
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def namespace(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def path(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def port(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/auditregistration/v1alpha1/service_reference.rb#13
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/auditregistration/v1alpha1/webhook.rb#2
class KubeDSL::DSL::Auditregistration::V1alpha1::Webhook < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def client_config(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/auditregistration/v1alpha1/webhook.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/auditregistration/v1alpha1/webhook.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def throttle(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/auditregistration/v1alpha1/webhook_client_config.rb#2
class KubeDSL::DSL::Auditregistration::V1alpha1::WebhookClientConfig < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def ca_bundle(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/auditregistration/v1alpha1/webhook_client_config.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/auditregistration/v1alpha1/webhook_client_config.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def service(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def url(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/auditregistration/v1alpha1/webhook_throttle_config.rb#2
class KubeDSL::DSL::Auditregistration::V1alpha1::WebhookThrottleConfig < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def burst(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/auditregistration/v1alpha1/webhook_throttle_config.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def qps(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/auditregistration/v1alpha1/webhook_throttle_config.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/authentication.rb#1
module KubeDSL::DSL::Authentication; end

# source://kube-dsl//lib/kube-dsl/dsl/authentication/v1.rb#1
module KubeDSL::DSL::Authentication::V1; end

# source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/bound_object_reference.rb#2
class KubeDSL::DSL::Authentication::V1::BoundObjectReference < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def api_version(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def kind(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/bound_object_reference.rb#22
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/bound_object_reference.rb#13
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def uid(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/token_request.rb#2
class KubeDSL::DSL::Authentication::V1::TokenRequest < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/token_request.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/token_request.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def status(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/token_request_spec.rb#2
class KubeDSL::DSL::Authentication::V1::TokenRequestSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def audiences(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def bound_object_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def expiration_seconds(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/token_request_spec.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/token_request_spec.rb#11
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/token_request_status.rb#2
class KubeDSL::DSL::Authentication::V1::TokenRequestStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def expiration_timestamp(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/token_request_status.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/token_request_status.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def token(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/token_review.rb#2
class KubeDSL::DSL::Authentication::V1::TokenReview < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/token_review.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/token_review.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def status(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/token_review_spec.rb#2
class KubeDSL::DSL::Authentication::V1::TokenReviewSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def audiences(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/token_review_spec.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/token_review_spec.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def token(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/token_review_status.rb#2
class KubeDSL::DSL::Authentication::V1::TokenReviewStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def audiences(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def authenticated(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def error(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/token_review_status.rb#22
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/token_review_status.rb#13
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def user(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/user_info.rb#2
class KubeDSL::DSL::Authentication::V1::UserInfo < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#46
  def extra(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def groups(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/user_info.rb#22
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/authentication/v1/user_info.rb#13
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def uid(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def username(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/authentication/v1beta1.rb#1
module KubeDSL::DSL::Authentication::V1beta1; end

# source://kube-dsl//lib/kube-dsl/dsl/authentication/v1beta1/token_review.rb#2
class KubeDSL::DSL::Authentication::V1beta1::TokenReview < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/authentication/v1beta1/token_review.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/authentication/v1beta1/token_review.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def status(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/authentication/v1beta1/token_review_spec.rb#2
class KubeDSL::DSL::Authentication::V1beta1::TokenReviewSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def audiences(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/authentication/v1beta1/token_review_spec.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/authentication/v1beta1/token_review_spec.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def token(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/authentication/v1beta1/token_review_status.rb#2
class KubeDSL::DSL::Authentication::V1beta1::TokenReviewStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def audiences(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def authenticated(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def error(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/authentication/v1beta1/token_review_status.rb#22
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/authentication/v1beta1/token_review_status.rb#13
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def user(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/authentication/v1beta1/user_info.rb#2
class KubeDSL::DSL::Authentication::V1beta1::UserInfo < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#46
  def extra(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def groups(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/authentication/v1beta1/user_info.rb#22
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/authentication/v1beta1/user_info.rb#13
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def uid(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def username(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/authorization.rb#1
module KubeDSL::DSL::Authorization; end

# source://kube-dsl//lib/kube-dsl/dsl/authorization/v1.rb#1
module KubeDSL::DSL::Authorization::V1; end

# source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/local_subject_access_review.rb#2
class KubeDSL::DSL::Authorization::V1::LocalSubjectAccessReview < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/local_subject_access_review.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/local_subject_access_review.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def status(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/non_resource_attributes.rb#2
class KubeDSL::DSL::Authorization::V1::NonResourceAttributes < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/non_resource_attributes.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def path(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/non_resource_attributes.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def verb(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/non_resource_rule.rb#2
class KubeDSL::DSL::Authorization::V1::NonResourceRule < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/non_resource_rule.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def non_resource_ur_ls(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/non_resource_rule.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def verbs(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/resource_attributes.rb#2
class KubeDSL::DSL::Authorization::V1::ResourceAttributes < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def group(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/resource_attributes.rb#31
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def namespace(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def resource(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/resource_attributes.rb#19
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def subresource(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def verb(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def version(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/resource_rule.rb#2
class KubeDSL::DSL::Authorization::V1::ResourceRule < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def api_groups(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/resource_rule.rb#22
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def resource_names(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def resources(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/resource_rule.rb#13
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def verbs(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/self_subject_access_review.rb#2
class KubeDSL::DSL::Authorization::V1::SelfSubjectAccessReview < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/self_subject_access_review.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/self_subject_access_review.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def status(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/self_subject_access_review_spec.rb#2
class KubeDSL::DSL::Authorization::V1::SelfSubjectAccessReviewSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/self_subject_access_review_spec.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def non_resource_attributes(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def resource_attributes(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/self_subject_access_review_spec.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/self_subject_rules_review.rb#2
class KubeDSL::DSL::Authorization::V1::SelfSubjectRulesReview < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/self_subject_rules_review.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/self_subject_rules_review.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def status(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/self_subject_rules_review_spec.rb#2
class KubeDSL::DSL::Authorization::V1::SelfSubjectRulesReviewSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/self_subject_rules_review_spec.rb#13
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def namespace(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/self_subject_rules_review_spec.rb#7
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/subject_access_review.rb#2
class KubeDSL::DSL::Authorization::V1::SubjectAccessReview < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/subject_access_review.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/subject_access_review.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def status(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/subject_access_review_spec.rb#2
class KubeDSL::DSL::Authorization::V1::SubjectAccessReviewSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#46
  def extra(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def groups(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/subject_access_review_spec.rb#28
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def non_resource_attributes(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def resource_attributes(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/subject_access_review_spec.rb#17
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def uid(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def user(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/subject_access_review_status.rb#2
class KubeDSL::DSL::Authorization::V1::SubjectAccessReviewStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def allowed(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def denied(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def evaluation_error(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/subject_access_review_status.rb#22
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/subject_access_review_status.rb#13
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/subject_rules_review_status.rb#2
class KubeDSL::DSL::Authorization::V1::SubjectRulesReviewStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def evaluation_error(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def incomplete(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/subject_rules_review_status.rb#22
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def non_resource_rule(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def non_resource_rules; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def resource_rule(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def resource_rules; end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1/subject_rules_review_status.rb#13
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/authorization/v1beta1.rb#1
module KubeDSL::DSL::Authorization::V1beta1; end

# source://kube-dsl//lib/kube-dsl/dsl/authorization/v1beta1/local_subject_access_review.rb#2
class KubeDSL::DSL::Authorization::V1beta1::LocalSubjectAccessReview < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1beta1/local_subject_access_review.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1beta1/local_subject_access_review.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def status(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/authorization/v1beta1/non_resource_attributes.rb#2
class KubeDSL::DSL::Authorization::V1beta1::NonResourceAttributes < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1beta1/non_resource_attributes.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def path(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1beta1/non_resource_attributes.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def verb(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/authorization/v1beta1/non_resource_rule.rb#2
class KubeDSL::DSL::Authorization::V1beta1::NonResourceRule < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1beta1/non_resource_rule.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def non_resource_ur_ls(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1beta1/non_resource_rule.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def verbs(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/authorization/v1beta1/resource_attributes.rb#2
class KubeDSL::DSL::Authorization::V1beta1::ResourceAttributes < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def group(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1beta1/resource_attributes.rb#31
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def namespace(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def resource(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1beta1/resource_attributes.rb#19
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def subresource(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def verb(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def version(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/authorization/v1beta1/resource_rule.rb#2
class KubeDSL::DSL::Authorization::V1beta1::ResourceRule < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def api_groups(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1beta1/resource_rule.rb#22
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def resource_names(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def resources(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1beta1/resource_rule.rb#13
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def verbs(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/authorization/v1beta1/self_subject_access_review.rb#2
class KubeDSL::DSL::Authorization::V1beta1::SelfSubjectAccessReview < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1beta1/self_subject_access_review.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1beta1/self_subject_access_review.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def status(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/authorization/v1beta1/self_subject_access_review_spec.rb#2
class KubeDSL::DSL::Authorization::V1beta1::SelfSubjectAccessReviewSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1beta1/self_subject_access_review_spec.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def non_resource_attributes(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def resource_attributes(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1beta1/self_subject_access_review_spec.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/authorization/v1beta1/self_subject_rules_review.rb#2
class KubeDSL::DSL::Authorization::V1beta1::SelfSubjectRulesReview < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1beta1/self_subject_rules_review.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1beta1/self_subject_rules_review.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def status(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/authorization/v1beta1/self_subject_rules_review_spec.rb#2
class KubeDSL::DSL::Authorization::V1beta1::SelfSubjectRulesReviewSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1beta1/self_subject_rules_review_spec.rb#13
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def namespace(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1beta1/self_subject_rules_review_spec.rb#7
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/authorization/v1beta1/subject_access_review.rb#2
class KubeDSL::DSL::Authorization::V1beta1::SubjectAccessReview < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1beta1/subject_access_review.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1beta1/subject_access_review.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def status(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/authorization/v1beta1/subject_access_review_spec.rb#2
class KubeDSL::DSL::Authorization::V1beta1::SubjectAccessReviewSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#46
  def extra(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def group(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1beta1/subject_access_review_spec.rb#28
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def non_resource_attributes(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def resource_attributes(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1beta1/subject_access_review_spec.rb#17
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def uid(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def user(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/authorization/v1beta1/subject_access_review_status.rb#2
class KubeDSL::DSL::Authorization::V1beta1::SubjectAccessReviewStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def allowed(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def denied(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def evaluation_error(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1beta1/subject_access_review_status.rb#22
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1beta1/subject_access_review_status.rb#13
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/authorization/v1beta1/subject_rules_review_status.rb#2
class KubeDSL::DSL::Authorization::V1beta1::SubjectRulesReviewStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def evaluation_error(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def incomplete(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1beta1/subject_rules_review_status.rb#22
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def non_resource_rule(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def non_resource_rules; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def resource_rule(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def resource_rules; end

  # source://kube-dsl//lib/kube-dsl/dsl/authorization/v1beta1/subject_rules_review_status.rb#13
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling.rb#1
module KubeDSL::DSL::Autoscaling; end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1.rb#1
module KubeDSL::DSL::Autoscaling::V1; end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/cross_version_object_reference.rb#2
class KubeDSL::DSL::Autoscaling::V1::CrossVersionObjectReference < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def api_version(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def kind(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/cross_version_object_reference.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/cross_version_object_reference.rb#11
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/horizontal_pod_autoscaler.rb#2
class KubeDSL::DSL::Autoscaling::V1::HorizontalPodAutoscaler < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/horizontal_pod_autoscaler.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/horizontal_pod_autoscaler.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def status(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/horizontal_pod_autoscaler_list.rb#2
class KubeDSL::DSL::Autoscaling::V1::HorizontalPodAutoscalerList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/horizontal_pod_autoscaler_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/horizontal_pod_autoscaler_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/horizontal_pod_autoscaler_spec.rb#2
class KubeDSL::DSL::Autoscaling::V1::HorizontalPodAutoscalerSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/horizontal_pod_autoscaler_spec.rb#22
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def max_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def min_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def scale_target_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/horizontal_pod_autoscaler_spec.rb#13
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def target_cpu_utilization_percentage(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/horizontal_pod_autoscaler_status.rb#2
class KubeDSL::DSL::Autoscaling::V1::HorizontalPodAutoscalerStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def current_cpu_utilization_percentage(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def current_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def desired_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/horizontal_pod_autoscaler_status.rb#25
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def last_scale_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def observed_generation(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/horizontal_pod_autoscaler_status.rb#15
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/scale.rb#2
class KubeDSL::DSL::Autoscaling::V1::Scale < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/scale.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/scale.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def status(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/scale_spec.rb#2
class KubeDSL::DSL::Autoscaling::V1::ScaleSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/scale_spec.rb#13
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/scale_spec.rb#7
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/scale_status.rb#2
class KubeDSL::DSL::Autoscaling::V1::ScaleStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/scale_status.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def selector(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v1/scale_status.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1.rb#1
module KubeDSL::DSL::Autoscaling::V2beta1; end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/cross_version_object_reference.rb#2
class KubeDSL::DSL::Autoscaling::V2beta1::CrossVersionObjectReference < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def api_version(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def kind(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/cross_version_object_reference.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/cross_version_object_reference.rb#11
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/external_metric_source.rb#2
class KubeDSL::DSL::Autoscaling::V2beta1::ExternalMetricSource < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/external_metric_source.rb#22
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def metric_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metric_selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/external_metric_source.rb#13
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def target_average_value(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def target_value(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/external_metric_status.rb#2
class KubeDSL::DSL::Autoscaling::V2beta1::ExternalMetricStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def current_average_value(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def current_value(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/external_metric_status.rb#22
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def metric_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metric_selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/external_metric_status.rb#13
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/horizontal_pod_autoscaler.rb#2
class KubeDSL::DSL::Autoscaling::V2beta1::HorizontalPodAutoscaler < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/horizontal_pod_autoscaler.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/horizontal_pod_autoscaler.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def status(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/horizontal_pod_autoscaler_condition.rb#2
class KubeDSL::DSL::Autoscaling::V2beta1::HorizontalPodAutoscalerCondition < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/horizontal_pod_autoscaler_condition.rb#25
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def last_transition_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/horizontal_pod_autoscaler_condition.rb#15
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def status(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/horizontal_pod_autoscaler_list.rb#2
class KubeDSL::DSL::Autoscaling::V2beta1::HorizontalPodAutoscalerList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/horizontal_pod_autoscaler_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/horizontal_pod_autoscaler_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/horizontal_pod_autoscaler_spec.rb#2
class KubeDSL::DSL::Autoscaling::V2beta1::HorizontalPodAutoscalerSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/horizontal_pod_autoscaler_spec.rb#22
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def max_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def metric(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def metrics; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def min_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def scale_target_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/horizontal_pod_autoscaler_spec.rb#13
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/horizontal_pod_autoscaler_status.rb#2
class KubeDSL::DSL::Autoscaling::V2beta1::HorizontalPodAutoscalerStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def condition(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def conditions; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def current_metric(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def current_metrics; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def current_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def desired_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/horizontal_pod_autoscaler_status.rb#28
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def last_scale_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def observed_generation(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/horizontal_pod_autoscaler_status.rb#17
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/metric_spec.rb#2
class KubeDSL::DSL::Autoscaling::V2beta1::MetricSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def external(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/metric_spec.rb#25
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def object(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def pods(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def resource(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/metric_spec.rb#15
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/metric_status.rb#2
class KubeDSL::DSL::Autoscaling::V2beta1::MetricStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def external(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/metric_status.rb#25
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def object(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def pods(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def resource(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/metric_status.rb#15
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/object_metric_source.rb#2
class KubeDSL::DSL::Autoscaling::V2beta1::ObjectMetricSource < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def average_value(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/object_metric_source.rb#25
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def metric_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/object_metric_source.rb#15
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def target(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def target_value(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/object_metric_status.rb#2
class KubeDSL::DSL::Autoscaling::V2beta1::ObjectMetricStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def average_value(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def current_value(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/object_metric_status.rb#25
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def metric_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/object_metric_status.rb#15
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def target(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/pods_metric_source.rb#2
class KubeDSL::DSL::Autoscaling::V2beta1::PodsMetricSource < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/pods_metric_source.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def metric_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/pods_metric_source.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def target_average_value(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/pods_metric_status.rb#2
class KubeDSL::DSL::Autoscaling::V2beta1::PodsMetricStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def current_average_value(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/pods_metric_status.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def metric_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/pods_metric_status.rb#11
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/resource_metric_source.rb#2
class KubeDSL::DSL::Autoscaling::V2beta1::ResourceMetricSource < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/resource_metric_source.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/resource_metric_source.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def target_average_utilization(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def target_average_value(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/resource_metric_status.rb#2
class KubeDSL::DSL::Autoscaling::V2beta1::ResourceMetricStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def current_average_utilization(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def current_average_value(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/resource_metric_status.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta1/resource_metric_status.rb#11
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2.rb#1
module KubeDSL::DSL::Autoscaling::V2beta2; end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/cross_version_object_reference.rb#2
class KubeDSL::DSL::Autoscaling::V2beta2::CrossVersionObjectReference < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def api_version(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def kind(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/cross_version_object_reference.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/cross_version_object_reference.rb#11
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/external_metric_source.rb#2
class KubeDSL::DSL::Autoscaling::V2beta2::ExternalMetricSource < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/external_metric_source.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metric(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/external_metric_source.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def target(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/external_metric_status.rb#2
class KubeDSL::DSL::Autoscaling::V2beta2::ExternalMetricStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def current(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/external_metric_status.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metric(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/external_metric_status.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/horizontal_pod_autoscaler.rb#2
class KubeDSL::DSL::Autoscaling::V2beta2::HorizontalPodAutoscaler < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/horizontal_pod_autoscaler.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/horizontal_pod_autoscaler.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def status(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/horizontal_pod_autoscaler_condition.rb#2
class KubeDSL::DSL::Autoscaling::V2beta2::HorizontalPodAutoscalerCondition < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/horizontal_pod_autoscaler_condition.rb#25
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def last_transition_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/horizontal_pod_autoscaler_condition.rb#15
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def status(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/horizontal_pod_autoscaler_list.rb#2
class KubeDSL::DSL::Autoscaling::V2beta2::HorizontalPodAutoscalerList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/horizontal_pod_autoscaler_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/horizontal_pod_autoscaler_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/horizontal_pod_autoscaler_spec.rb#2
class KubeDSL::DSL::Autoscaling::V2beta2::HorizontalPodAutoscalerSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/horizontal_pod_autoscaler_spec.rb#22
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def max_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def metric(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def metrics; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def min_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def scale_target_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/horizontal_pod_autoscaler_spec.rb#13
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/horizontal_pod_autoscaler_status.rb#2
class KubeDSL::DSL::Autoscaling::V2beta2::HorizontalPodAutoscalerStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def condition(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def conditions; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def current_metric(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def current_metrics; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def current_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def desired_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/horizontal_pod_autoscaler_status.rb#28
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def last_scale_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def observed_generation(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/horizontal_pod_autoscaler_status.rb#17
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/metric_identifier.rb#2
class KubeDSL::DSL::Autoscaling::V2beta2::MetricIdentifier < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/metric_identifier.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/metric_identifier.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/metric_spec.rb#2
class KubeDSL::DSL::Autoscaling::V2beta2::MetricSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def external(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/metric_spec.rb#25
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def object(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def pods(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def resource(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/metric_spec.rb#15
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/metric_status.rb#2
class KubeDSL::DSL::Autoscaling::V2beta2::MetricStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def external(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/metric_status.rb#25
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def object(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def pods(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def resource(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/metric_status.rb#15
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/metric_target.rb#2
class KubeDSL::DSL::Autoscaling::V2beta2::MetricTarget < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def average_utilization(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def average_value(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/metric_target.rb#22
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/metric_target.rb#13
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def type(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def value(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/metric_value_status.rb#2
class KubeDSL::DSL::Autoscaling::V2beta2::MetricValueStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def average_utilization(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def average_value(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/metric_value_status.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/metric_value_status.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def value(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/object_metric_source.rb#2
class KubeDSL::DSL::Autoscaling::V2beta2::ObjectMetricSource < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def described_object(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/object_metric_source.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metric(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/object_metric_source.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def target(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/object_metric_status.rb#2
class KubeDSL::DSL::Autoscaling::V2beta2::ObjectMetricStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def current(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def described_object(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/object_metric_status.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metric(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/object_metric_status.rb#11
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/pods_metric_source.rb#2
class KubeDSL::DSL::Autoscaling::V2beta2::PodsMetricSource < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/pods_metric_source.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metric(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/pods_metric_source.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def target(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/pods_metric_status.rb#2
class KubeDSL::DSL::Autoscaling::V2beta2::PodsMetricStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def current(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/pods_metric_status.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metric(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/pods_metric_status.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/resource_metric_source.rb#2
class KubeDSL::DSL::Autoscaling::V2beta2::ResourceMetricSource < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/resource_metric_source.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/resource_metric_source.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def target(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/resource_metric_status.rb#2
class KubeDSL::DSL::Autoscaling::V2beta2::ResourceMetricStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def current(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/resource_metric_status.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/autoscaling/v2beta2/resource_metric_status.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/batch.rb#1
module KubeDSL::DSL::Batch; end

# source://kube-dsl//lib/kube-dsl/dsl/batch/v1.rb#1
module KubeDSL::DSL::Batch::V1; end

# source://kube-dsl//lib/kube-dsl/dsl/batch/v1/job.rb#2
class KubeDSL::DSL::Batch::V1::Job < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1/job.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1/job.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def status(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/batch/v1/job_condition.rb#2
class KubeDSL::DSL::Batch::V1::JobCondition < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1/job_condition.rb#28
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def last_probe_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def last_transition_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1/job_condition.rb#17
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def status(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/batch/v1/job_list.rb#2
class KubeDSL::DSL::Batch::V1::JobList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1/job_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1/job_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/batch/v1/job_spec.rb#2
class KubeDSL::DSL::Batch::V1::JobSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def active_deadline_seconds(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def backoff_limit(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def completions(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1/job_spec.rb#34
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def manual_selector(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def parallelism(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1/job_spec.rb#21
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def template(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def ttl_seconds_after_finished(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/batch/v1/job_status.rb#2
class KubeDSL::DSL::Batch::V1::JobStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def active(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def completion_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def condition(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def conditions; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def failed(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1/job_status.rb#28
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1/job_status.rb#17
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def start_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def succeeded(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/batch/v1beta1.rb#1
module KubeDSL::DSL::Batch::V1beta1; end

# source://kube-dsl//lib/kube-dsl/dsl/batch/v1beta1/cron_job.rb#2
class KubeDSL::DSL::Batch::V1beta1::CronJob < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1beta1/cron_job.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1beta1/cron_job.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def status(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/batch/v1beta1/cron_job_list.rb#2
class KubeDSL::DSL::Batch::V1beta1::CronJobList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1beta1/cron_job_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1beta1/cron_job_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/batch/v1beta1/cron_job_spec.rb#2
class KubeDSL::DSL::Batch::V1beta1::CronJobSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def concurrency_policy(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def failed_jobs_history_limit(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def job_template(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1beta1/cron_job_spec.rb#31
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def schedule(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1beta1/cron_job_spec.rb#19
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def starting_deadline_seconds(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def successful_jobs_history_limit(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def suspend(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/batch/v1beta1/cron_job_status.rb#2
class KubeDSL::DSL::Batch::V1beta1::CronJobStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def active(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def actives; end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1beta1/cron_job_status.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def last_schedule_time(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1beta1/cron_job_status.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/batch/v1beta1/job_template_spec.rb#2
class KubeDSL::DSL::Batch::V1beta1::JobTemplateSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1beta1/job_template_spec.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v1beta1/job_template_spec.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/batch/v2alpha1.rb#1
module KubeDSL::DSL::Batch::V2alpha1; end

# source://kube-dsl//lib/kube-dsl/dsl/batch/v2alpha1/cron_job.rb#2
class KubeDSL::DSL::Batch::V2alpha1::CronJob < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/batch/v2alpha1/cron_job.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v2alpha1/cron_job.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def status(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/batch/v2alpha1/cron_job_list.rb#2
class KubeDSL::DSL::Batch::V2alpha1::CronJobList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v2alpha1/cron_job_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v2alpha1/cron_job_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/batch/v2alpha1/cron_job_spec.rb#2
class KubeDSL::DSL::Batch::V2alpha1::CronJobSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def concurrency_policy(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def failed_jobs_history_limit(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def job_template(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v2alpha1/cron_job_spec.rb#31
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def schedule(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v2alpha1/cron_job_spec.rb#19
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def starting_deadline_seconds(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def successful_jobs_history_limit(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def suspend(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/batch/v2alpha1/cron_job_status.rb#2
class KubeDSL::DSL::Batch::V2alpha1::CronJobStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def active(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def actives; end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v2alpha1/cron_job_status.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def last_schedule_time(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v2alpha1/cron_job_status.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/batch/v2alpha1/job_template_spec.rb#2
class KubeDSL::DSL::Batch::V2alpha1::JobTemplateSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/batch/v2alpha1/job_template_spec.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/batch/v2alpha1/job_template_spec.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/certificates.rb#1
module KubeDSL::DSL::Certificates; end

# source://kube-dsl//lib/kube-dsl/dsl/certificates/v1beta1.rb#1
module KubeDSL::DSL::Certificates::V1beta1; end

# source://kube-dsl//lib/kube-dsl/dsl/certificates/v1beta1/certificate_signing_request.rb#2
class KubeDSL::DSL::Certificates::V1beta1::CertificateSigningRequest < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/certificates/v1beta1/certificate_signing_request.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/certificates/v1beta1/certificate_signing_request.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def status(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/certificates/v1beta1/certificate_signing_request_condition.rb#2
class KubeDSL::DSL::Certificates::V1beta1::CertificateSigningRequestCondition < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/certificates/v1beta1/certificate_signing_request_condition.rb#22
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def last_update_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/certificates/v1beta1/certificate_signing_request_condition.rb#13
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/certificates/v1beta1/certificate_signing_request_list.rb#2
class KubeDSL::DSL::Certificates::V1beta1::CertificateSigningRequestList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/certificates/v1beta1/certificate_signing_request_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/certificates/v1beta1/certificate_signing_request_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/certificates/v1beta1/certificate_signing_request_spec.rb#2
class KubeDSL::DSL::Certificates::V1beta1::CertificateSigningRequestSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#46
  def extra(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def groups(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/certificates/v1beta1/certificate_signing_request_spec.rb#28
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def request(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/certificates/v1beta1/certificate_signing_request_spec.rb#17
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def uid(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def usages(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def username(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/certificates/v1beta1/certificate_signing_request_status.rb#2
class KubeDSL::DSL::Certificates::V1beta1::CertificateSigningRequestStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def certificate(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def condition(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def conditions; end

  # source://kube-dsl//lib/kube-dsl/dsl/certificates/v1beta1/certificate_signing_request_status.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/certificates/v1beta1/certificate_signing_request_status.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/coordination.rb#1
module KubeDSL::DSL::Coordination; end

# source://kube-dsl//lib/kube-dsl/dsl/coordination/v1.rb#1
module KubeDSL::DSL::Coordination::V1; end

# source://kube-dsl//lib/kube-dsl/dsl/coordination/v1/lease.rb#2
class KubeDSL::DSL::Coordination::V1::Lease < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/coordination/v1/lease.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/coordination/v1/lease.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/coordination/v1/lease_list.rb#2
class KubeDSL::DSL::Coordination::V1::LeaseList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/coordination/v1/lease_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/coordination/v1/lease_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/coordination/v1/lease_spec.rb#2
class KubeDSL::DSL::Coordination::V1::LeaseSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def acquire_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def holder_identity(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/coordination/v1/lease_spec.rb#25
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def lease_duration_seconds(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def lease_transitions(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def renew_time(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/coordination/v1/lease_spec.rb#15
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/coordination/v1beta1.rb#1
module KubeDSL::DSL::Coordination::V1beta1; end

# source://kube-dsl//lib/kube-dsl/dsl/coordination/v1beta1/lease.rb#2
class KubeDSL::DSL::Coordination::V1beta1::Lease < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/coordination/v1beta1/lease.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/coordination/v1beta1/lease.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/coordination/v1beta1/lease_list.rb#2
class KubeDSL::DSL::Coordination::V1beta1::LeaseList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/coordination/v1beta1/lease_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/coordination/v1beta1/lease_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/coordination/v1beta1/lease_spec.rb#2
class KubeDSL::DSL::Coordination::V1beta1::LeaseSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def acquire_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def holder_identity(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/coordination/v1beta1/lease_spec.rb#25
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def lease_duration_seconds(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def lease_transitions(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def renew_time(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/coordination/v1beta1/lease_spec.rb#15
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/discovery.rb#1
module KubeDSL::DSL::Discovery; end

# source://kube-dsl//lib/kube-dsl/dsl/discovery/v1beta1.rb#1
module KubeDSL::DSL::Discovery::V1beta1; end

# source://kube-dsl//lib/kube-dsl/dsl/discovery/v1beta1/endpoint.rb#2
class KubeDSL::DSL::Discovery::V1beta1::Endpoint < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def addresses(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def conditions(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def hostname(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1beta1/endpoint.rb#25
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1beta1/endpoint.rb#15
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def target_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#46
  def topology(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/discovery/v1beta1/endpoint_conditions.rb#2
class KubeDSL::DSL::Discovery::V1beta1::EndpointConditions < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1beta1/endpoint_conditions.rb#13
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def ready(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1beta1/endpoint_conditions.rb#7
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/discovery/v1beta1/endpoint_port.rb#2
class KubeDSL::DSL::Discovery::V1beta1::EndpointPort < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def app_protocol(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1beta1/endpoint_port.rb#22
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def port(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def protocol(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1beta1/endpoint_port.rb#13
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/discovery/v1beta1/endpoint_slice.rb#2
class KubeDSL::DSL::Discovery::V1beta1::EndpointSlice < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def address_type(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def endpoint(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def endpoints; end

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1beta1/endpoint_slice.rb#24
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def port(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def ports; end

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1beta1/endpoint_slice.rb#13
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/discovery/v1beta1/endpoint_slice_list.rb#2
class KubeDSL::DSL::Discovery::V1beta1::EndpointSliceList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1beta1/endpoint_slice_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/discovery/v1beta1/endpoint_slice_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/events.rb#1
module KubeDSL::DSL::Events; end

# source://kube-dsl//lib/kube-dsl/dsl/events/v1beta1.rb#1
module KubeDSL::DSL::Events::V1beta1; end

# source://kube-dsl//lib/kube-dsl/dsl/events/v1beta1/event.rb#2
class KubeDSL::DSL::Events::V1beta1::Event < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def action(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def deprecated_count(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def deprecated_first_timestamp(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def deprecated_last_timestamp(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def deprecated_source(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def event_time(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/events/v1beta1/event.rb#57
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def note(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def regarding(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def related(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def reporting_controller(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def reporting_instance(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/events/v1beta1/event.rb#35
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def series(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/events/v1beta1/event_list.rb#2
class KubeDSL::DSL::Events::V1beta1::EventList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/events/v1beta1/event_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/events/v1beta1/event_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/events/v1beta1/event_series.rb#2
class KubeDSL::DSL::Events::V1beta1::EventSeries < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def count(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/events/v1beta1/event_series.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def last_observed_time(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/events/v1beta1/event_series.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def state(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/extensions.rb#1
module KubeDSL::DSL::Extensions; end

# source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1.rb#1
module KubeDSL::DSL::Extensions::V1beta1; end

# source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/allowed_csi_driver.rb#2
class KubeDSL::DSL::Extensions::V1beta1::AllowedCSIDriver < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/allowed_csi_driver.rb#13
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/allowed_csi_driver.rb#7
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/allowed_flex_volume.rb#2
class KubeDSL::DSL::Extensions::V1beta1::AllowedFlexVolume < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def driver(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/allowed_flex_volume.rb#13
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/allowed_flex_volume.rb#7
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/allowed_host_path.rb#2
class KubeDSL::DSL::Extensions::V1beta1::AllowedHostPath < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/allowed_host_path.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def path_prefix(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def read_only(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/allowed_host_path.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/daemon_set.rb#2
class KubeDSL::DSL::Extensions::V1beta1::DaemonSet < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/daemon_set.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/daemon_set.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def status(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/daemon_set_condition.rb#2
class KubeDSL::DSL::Extensions::V1beta1::DaemonSetCondition < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/daemon_set_condition.rb#25
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def last_transition_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/daemon_set_condition.rb#15
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def status(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/daemon_set_list.rb#2
class KubeDSL::DSL::Extensions::V1beta1::DaemonSetList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/daemon_set_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/daemon_set_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/daemon_set_spec.rb#2
class KubeDSL::DSL::Extensions::V1beta1::DaemonSetSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/daemon_set_spec.rb#28
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def min_ready_seconds(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def revision_history_limit(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/daemon_set_spec.rb#17
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def template(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def template_generation(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def update_strategy(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/daemon_set_status.rb#2
class KubeDSL::DSL::Extensions::V1beta1::DaemonSetStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def collision_count(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def condition(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def conditions; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def current_number_scheduled(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def desired_number_scheduled(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/daemon_set_status.rb#40
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def number_available(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def number_misscheduled(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def number_ready(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def number_unavailable(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def observed_generation(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/daemon_set_status.rb#25
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def updated_number_scheduled(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/daemon_set_update_strategy.rb#2
class KubeDSL::DSL::Extensions::V1beta1::DaemonSetUpdateStrategy < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/daemon_set_update_strategy.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def rolling_update(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/daemon_set_update_strategy.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/deployment.rb#2
class KubeDSL::DSL::Extensions::V1beta1::Deployment < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/deployment.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/deployment.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def status(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/deployment_condition.rb#2
class KubeDSL::DSL::Extensions::V1beta1::DeploymentCondition < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/deployment_condition.rb#28
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def last_transition_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def last_update_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/deployment_condition.rb#17
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def status(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/deployment_list.rb#2
class KubeDSL::DSL::Extensions::V1beta1::DeploymentList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/deployment_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/deployment_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/deployment_rollback.rb#2
class KubeDSL::DSL::Extensions::V1beta1::DeploymentRollback < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/deployment_rollback.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def rollback_to(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/deployment_rollback.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#46
  def updated_annotations(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/deployment_spec.rb#2
class KubeDSL::DSL::Extensions::V1beta1::DeploymentSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/deployment_spec.rb#37
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def min_ready_seconds(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def paused(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def progress_deadline_seconds(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def revision_history_limit(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def rollback_to(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/deployment_spec.rb#23
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def strategy(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def template(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/deployment_status.rb#2
class KubeDSL::DSL::Extensions::V1beta1::DeploymentStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def available_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def collision_count(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def condition(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def conditions; end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/deployment_status.rb#34
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def observed_generation(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def ready_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/deployment_status.rb#21
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def unavailable_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def updated_replicas(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/deployment_strategy.rb#2
class KubeDSL::DSL::Extensions::V1beta1::DeploymentStrategy < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/deployment_strategy.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def rolling_update(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/deployment_strategy.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/fs_group_strategy_options.rb#2
class KubeDSL::DSL::Extensions::V1beta1::FSGroupStrategyOptions < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/fs_group_strategy_options.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def range(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def ranges; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def rule(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/fs_group_strategy_options.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/http_ingress_path.rb#2
class KubeDSL::DSL::Extensions::V1beta1::HTTPIngressPath < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def backend(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/http_ingress_path.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def path(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/http_ingress_path.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/http_ingress_rule_value.rb#2
class KubeDSL::DSL::Extensions::V1beta1::HTTPIngressRuleValue < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/http_ingress_rule_value.rb#13
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def path(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def paths; end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/http_ingress_rule_value.rb#7
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/host_port_range.rb#2
class KubeDSL::DSL::Extensions::V1beta1::HostPortRange < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/host_port_range.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def max(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def min(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/host_port_range.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/id_range.rb#2
class KubeDSL::DSL::Extensions::V1beta1::IDRange < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/id_range.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def max(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def min(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/id_range.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/ip_block.rb#2
class KubeDSL::DSL::Extensions::V1beta1::IPBlock < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def cidr(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def except(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/ip_block.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/ip_block.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/ingress.rb#2
class KubeDSL::DSL::Extensions::V1beta1::Ingress < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/ingress.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/ingress.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def status(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/ingress_backend.rb#2
class KubeDSL::DSL::Extensions::V1beta1::IngressBackend < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/ingress_backend.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/ingress_backend.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def service_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def service_port(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/ingress_list.rb#2
class KubeDSL::DSL::Extensions::V1beta1::IngressList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/ingress_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/ingress_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/ingress_rule.rb#2
class KubeDSL::DSL::Extensions::V1beta1::IngressRule < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def host(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def http(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/ingress_rule.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/ingress_rule.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/ingress_spec.rb#2
class KubeDSL::DSL::Extensions::V1beta1::IngressSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def backend(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/ingress_spec.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def rule(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def rules; end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/ingress_spec.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def tls(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def tlses; end
end

# source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/ingress_status.rb#2
class KubeDSL::DSL::Extensions::V1beta1::IngressStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/ingress_status.rb#13
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def load_balancer(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/ingress_status.rb#7
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/ingress_tls.rb#2
class KubeDSL::DSL::Extensions::V1beta1::IngressTLS < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def hosts(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/ingress_tls.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def secret_name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/ingress_tls.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/network_policy.rb#2
class KubeDSL::DSL::Extensions::V1beta1::NetworkPolicy < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/network_policy.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/network_policy.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/network_policy_egress_rule.rb#2
class KubeDSL::DSL::Extensions::V1beta1::NetworkPolicyEgressRule < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/network_policy_egress_rule.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def port(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def ports; end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/network_policy_egress_rule.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def to(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def tos; end
end

# source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/network_policy_ingress_rule.rb#2
class KubeDSL::DSL::Extensions::V1beta1::NetworkPolicyIngressRule < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def from(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def froms; end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/network_policy_ingress_rule.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def port(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def ports; end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/network_policy_ingress_rule.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/network_policy_list.rb#2
class KubeDSL::DSL::Extensions::V1beta1::NetworkPolicyList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/network_policy_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/network_policy_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/network_policy_peer.rb#2
class KubeDSL::DSL::Extensions::V1beta1::NetworkPolicyPeer < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def ip_block(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/network_policy_peer.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def namespace_selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def pod_selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/network_policy_peer.rb#11
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/network_policy_port.rb#2
class KubeDSL::DSL::Extensions::V1beta1::NetworkPolicyPort < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/network_policy_port.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def port(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def protocol(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/network_policy_port.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/network_policy_spec.rb#2
class KubeDSL::DSL::Extensions::V1beta1::NetworkPolicySpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def egress(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def egresses; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def ingress(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def ingresses; end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/network_policy_spec.rb#22
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def pod_selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def policy_types(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/network_policy_spec.rb#13
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/pod_security_policy.rb#2
class KubeDSL::DSL::Extensions::V1beta1::PodSecurityPolicy < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/pod_security_policy.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/pod_security_policy.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/pod_security_policy_list.rb#2
class KubeDSL::DSL::Extensions::V1beta1::PodSecurityPolicyList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/pod_security_policy_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/pod_security_policy_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/pod_security_policy_spec.rb#2
class KubeDSL::DSL::Extensions::V1beta1::PodSecurityPolicySpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def allow_privilege_escalation(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def allowed_capabilities(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def allowed_csi_driver(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def allowed_csi_drivers; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def allowed_flex_volume(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def allowed_flex_volumes; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def allowed_host_path(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def allowed_host_paths; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def allowed_proc_mount_types(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def allowed_unsafe_sysctls(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def default_add_capabilities(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def default_allow_privilege_escalation(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def forbidden_sysctls(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def fs_group(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def host_ipc(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def host_network(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def host_pid(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def host_port(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def host_ports; end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/pod_security_policy_spec.rb#82
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def privileged(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def read_only_root_filesystem(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def required_drop_capabilities(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def run_as_group(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def run_as_user(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def runtime_class(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def se_linux(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/pod_security_policy_spec.rb#53
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def supplemental_groups(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def volumes(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/replica_set.rb#2
class KubeDSL::DSL::Extensions::V1beta1::ReplicaSet < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/replica_set.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/replica_set.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def status(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/replica_set_condition.rb#2
class KubeDSL::DSL::Extensions::V1beta1::ReplicaSetCondition < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/replica_set_condition.rb#25
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def last_transition_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/replica_set_condition.rb#15
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def status(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/replica_set_list.rb#2
class KubeDSL::DSL::Extensions::V1beta1::ReplicaSetList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/replica_set_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/replica_set_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/replica_set_spec.rb#2
class KubeDSL::DSL::Extensions::V1beta1::ReplicaSetSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/replica_set_spec.rb#22
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def min_ready_seconds(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/replica_set_spec.rb#13
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def template(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/replica_set_status.rb#2
class KubeDSL::DSL::Extensions::V1beta1::ReplicaSetStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def available_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def condition(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def conditions; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def fully_labeled_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/replica_set_status.rb#28
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def observed_generation(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def ready_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/replica_set_status.rb#17
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/rollback_config.rb#2
class KubeDSL::DSL::Extensions::V1beta1::RollbackConfig < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/rollback_config.rb#13
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def revision(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/rollback_config.rb#7
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/rolling_update_daemon_set.rb#2
class KubeDSL::DSL::Extensions::V1beta1::RollingUpdateDaemonSet < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/rolling_update_daemon_set.rb#13
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def max_unavailable(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/rolling_update_daemon_set.rb#7
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/rolling_update_deployment.rb#2
class KubeDSL::DSL::Extensions::V1beta1::RollingUpdateDeployment < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/rolling_update_deployment.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def max_surge(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def max_unavailable(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/rolling_update_deployment.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/run_as_group_strategy_options.rb#2
class KubeDSL::DSL::Extensions::V1beta1::RunAsGroupStrategyOptions < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/run_as_group_strategy_options.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def range(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def ranges; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def rule(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/run_as_group_strategy_options.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/run_as_user_strategy_options.rb#2
class KubeDSL::DSL::Extensions::V1beta1::RunAsUserStrategyOptions < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/run_as_user_strategy_options.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def range(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def ranges; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def rule(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/run_as_user_strategy_options.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/runtime_class_strategy_options.rb#2
class KubeDSL::DSL::Extensions::V1beta1::RuntimeClassStrategyOptions < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def allowed_runtime_class_names(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def default_runtime_class_name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/runtime_class_strategy_options.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/runtime_class_strategy_options.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/se_linux_strategy_options.rb#2
class KubeDSL::DSL::Extensions::V1beta1::SELinuxStrategyOptions < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/se_linux_strategy_options.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def rule(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def se_linux_options(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/se_linux_strategy_options.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/scale.rb#2
class KubeDSL::DSL::Extensions::V1beta1::Scale < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/scale.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/scale.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def status(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/scale_spec.rb#2
class KubeDSL::DSL::Extensions::V1beta1::ScaleSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/scale_spec.rb#13
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/scale_spec.rb#7
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/scale_status.rb#2
class KubeDSL::DSL::Extensions::V1beta1::ScaleStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/scale_status.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#46
  def selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/scale_status.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def target_selector(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/supplemental_groups_strategy_options.rb#2
class KubeDSL::DSL::Extensions::V1beta1::SupplementalGroupsStrategyOptions < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/supplemental_groups_strategy_options.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def range(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def ranges; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def rule(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/extensions/v1beta1/supplemental_groups_strategy_options.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol.rb#1
module KubeDSL::DSL::Flowcontrol; end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1.rb#1
module KubeDSL::DSL::Flowcontrol::V1alpha1; end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/flow_distinguisher_method.rb#2
class KubeDSL::DSL::Flowcontrol::V1alpha1::FlowDistinguisherMethod < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/flow_distinguisher_method.rb#13
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/flow_distinguisher_method.rb#7
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/flow_schema.rb#2
class KubeDSL::DSL::Flowcontrol::V1alpha1::FlowSchema < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/flow_schema.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/flow_schema.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def status(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/flow_schema_condition.rb#2
class KubeDSL::DSL::Flowcontrol::V1alpha1::FlowSchemaCondition < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/flow_schema_condition.rb#25
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def last_transition_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/flow_schema_condition.rb#15
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def status(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/flow_schema_list.rb#2
class KubeDSL::DSL::Flowcontrol::V1alpha1::FlowSchemaList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/flow_schema_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/flow_schema_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/flow_schema_spec.rb#2
class KubeDSL::DSL::Flowcontrol::V1alpha1::FlowSchemaSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def distinguisher_method(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/flow_schema_spec.rb#22
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def matching_precedence(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def priority_level_configuration(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def rule(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def rules; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/flow_schema_spec.rb#13
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/flow_schema_status.rb#2
class KubeDSL::DSL::Flowcontrol::V1alpha1::FlowSchemaStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def condition(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def conditions; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/flow_schema_status.rb#13
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/flow_schema_status.rb#7
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/group_subject.rb#2
class KubeDSL::DSL::Flowcontrol::V1alpha1::GroupSubject < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/group_subject.rb#13
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/group_subject.rb#7
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/limit_response.rb#2
class KubeDSL::DSL::Flowcontrol::V1alpha1::LimitResponse < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/limit_response.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def queuing(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/limit_response.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/limited_priority_level_configuration.rb#2
class KubeDSL::DSL::Flowcontrol::V1alpha1::LimitedPriorityLevelConfiguration < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def assured_concurrency_shares(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/limited_priority_level_configuration.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def limit_response(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/limited_priority_level_configuration.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/non_resource_policy_rule.rb#2
class KubeDSL::DSL::Flowcontrol::V1alpha1::NonResourcePolicyRule < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/non_resource_policy_rule.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def non_resource_ur_ls(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/non_resource_policy_rule.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def verbs(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/policy_rules_with_subjects.rb#2
class KubeDSL::DSL::Flowcontrol::V1alpha1::PolicyRulesWithSubjects < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/policy_rules_with_subjects.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def non_resource_rule(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def non_resource_rules; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def resource_rule(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def resource_rules; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/policy_rules_with_subjects.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def subject(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def subjects; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/priority_level_configuration.rb#2
class KubeDSL::DSL::Flowcontrol::V1alpha1::PriorityLevelConfiguration < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/priority_level_configuration.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/priority_level_configuration.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def status(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/priority_level_configuration_condition.rb#2
class KubeDSL::DSL::Flowcontrol::V1alpha1::PriorityLevelConfigurationCondition < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/priority_level_configuration_condition.rb#25
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def last_transition_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/priority_level_configuration_condition.rb#15
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def status(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/priority_level_configuration_list.rb#2
class KubeDSL::DSL::Flowcontrol::V1alpha1::PriorityLevelConfigurationList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/priority_level_configuration_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/priority_level_configuration_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/priority_level_configuration_reference.rb#2
class KubeDSL::DSL::Flowcontrol::V1alpha1::PriorityLevelConfigurationReference < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/priority_level_configuration_reference.rb#13
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/priority_level_configuration_reference.rb#7
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/priority_level_configuration_spec.rb#2
class KubeDSL::DSL::Flowcontrol::V1alpha1::PriorityLevelConfigurationSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/priority_level_configuration_spec.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def limited(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/priority_level_configuration_spec.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/priority_level_configuration_status.rb#2
class KubeDSL::DSL::Flowcontrol::V1alpha1::PriorityLevelConfigurationStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def condition(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def conditions; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/priority_level_configuration_status.rb#13
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/priority_level_configuration_status.rb#7
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/queuing_configuration.rb#2
class KubeDSL::DSL::Flowcontrol::V1alpha1::QueuingConfiguration < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def hand_size(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/queuing_configuration.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def queue_length_limit(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def queues(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/queuing_configuration.rb#11
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/resource_policy_rule.rb#2
class KubeDSL::DSL::Flowcontrol::V1alpha1::ResourcePolicyRule < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def api_groups(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def cluster_scope(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/resource_policy_rule.rb#25
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def namespaces(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def resources(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/resource_policy_rule.rb#15
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def verbs(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/service_account_subject.rb#2
class KubeDSL::DSL::Flowcontrol::V1alpha1::ServiceAccountSubject < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/service_account_subject.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def namespace(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/service_account_subject.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/subject.rb#2
class KubeDSL::DSL::Flowcontrol::V1alpha1::Subject < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def group(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def kind(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/subject.rb#22
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/subject.rb#13
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def service_account(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def user(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/user_subject.rb#2
class KubeDSL::DSL::Flowcontrol::V1alpha1::UserSubject < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/user_subject.rb#13
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/flowcontrol/v1alpha1/user_subject.rb#7
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/meta.rb#1
module KubeDSL::DSL::Meta; end

# source://kube-dsl//lib/kube-dsl/dsl/meta/v1.rb#1
module KubeDSL::DSL::Meta::V1; end

# source://kube-dsl//lib/kube-dsl/dsl/meta/v1/api_group.rb#2
class KubeDSL::DSL::Meta::V1::APIGroup < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/api_group.rb#24
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def preferred_version(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/api_group.rb#13
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def server_address_by_client_cidr(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def server_address_by_client_cidrs; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def version(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def versions; end
end

# source://kube-dsl//lib/kube-dsl/dsl/meta/v1/api_group_list.rb#2
class KubeDSL::DSL::Meta::V1::APIGroupList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def group(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def groups; end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/api_group_list.rb#15
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/api_group_list.rb#7
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/meta/v1/api_resource.rb#2
class KubeDSL::DSL::Meta::V1::APIResource < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def categories(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def group(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def kind(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/api_resource.rb#40
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def namespaced(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/api_resource.rb#25
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def short_names(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def singular_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def storage_version_hash(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def verbs(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def version(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/meta/v1/api_resource_list.rb#2
class KubeDSL::DSL::Meta::V1::APIResourceList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def group_version(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/api_resource_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def resource(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def resources; end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/api_resource_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/meta/v1/api_versions.rb#2
class KubeDSL::DSL::Meta::V1::APIVersions < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/api_versions.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/api_versions.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def server_address_by_client_cidr(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def server_address_by_client_cidrs; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def versions(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/meta/v1/delete_options.rb#2
class KubeDSL::DSL::Meta::V1::DeleteOptions < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def api_version(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def dry_run(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def grace_period_seconds(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/delete_options.rb#29
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def orphan_dependents(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def preconditions(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def propagation_policy(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/delete_options.rb#17
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/meta/v1/group_version_for_discovery.rb#2
class KubeDSL::DSL::Meta::V1::GroupVersionForDiscovery < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def group_version(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/group_version_for_discovery.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/group_version_for_discovery.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def version(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/meta/v1/label_selector.rb#2
class KubeDSL::DSL::Meta::V1::LabelSelector < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/label_selector.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def match_expression(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def match_expressions; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#46
  def match_labels(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/label_selector.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/meta/v1/label_selector_requirement.rb#2
class KubeDSL::DSL::Meta::V1::LabelSelectorRequirement < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def key(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/label_selector_requirement.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def operator(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/label_selector_requirement.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def values(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/meta/v1/list_meta.rb#2
class KubeDSL::DSL::Meta::V1::ListMeta < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def continue(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/list_meta.rb#22
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def remaining_item_count(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def resource_version(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def self_link(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/list_meta.rb#13
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/meta/v1/managed_fields_entry.rb#2
class KubeDSL::DSL::Meta::V1::ManagedFieldsEntry < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def api_version(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def fields_type(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def fields_v1(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/managed_fields_entry.rb#28
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def manager(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def operation(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/managed_fields_entry.rb#17
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def time(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/meta/v1/object_meta.rb#2
class KubeDSL::DSL::Meta::V1::ObjectMeta < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#46
  def annotations(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def cluster_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def creation_timestamp(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def deletion_grace_period_seconds(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def deletion_timestamp(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def finalizers(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def generate_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def generation(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/object_meta.rb#58
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#46
  def labels(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def managed_field(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def managed_fields; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def namespace(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def owner_reference(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def owner_references; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def resource_version(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def self_link(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/object_meta.rb#37
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def uid(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/meta/v1/owner_reference.rb#2
class KubeDSL::DSL::Meta::V1::OwnerReference < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def api_version(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def block_owner_deletion(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def controller(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def kind(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/owner_reference.rb#28
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/owner_reference.rb#17
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def uid(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/meta/v1/preconditions.rb#2
class KubeDSL::DSL::Meta::V1::Preconditions < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/preconditions.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def resource_version(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/preconditions.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def uid(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/meta/v1/server_address_by_client_cidr.rb#2
class KubeDSL::DSL::Meta::V1::ServerAddressByClientCIDR < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def client_cidr(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/server_address_by_client_cidr.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/server_address_by_client_cidr.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def server_address(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/meta/v1/status.rb#2
class KubeDSL::DSL::Meta::V1::Status < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def code(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def details(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/status.rb#30
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/status.rb#17
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def status(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/meta/v1/status_cause.rb#2
class KubeDSL::DSL::Meta::V1::StatusCause < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def field(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/status_cause.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/status_cause.rb#11
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/meta/v1/status_details.rb#2
class KubeDSL::DSL::Meta::V1::StatusDetails < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def cause(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def causes; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def group(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def kind(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/status_details.rb#28
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def retry_after_seconds(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/status_details.rb#17
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def uid(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/meta/v1/watch_event.rb#2
class KubeDSL::DSL::Meta::V1::WatchEvent < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/watch_event.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def object(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/meta/v1/watch_event.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/networking.rb#1
module KubeDSL::DSL::Networking; end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1.rb#1
module KubeDSL::DSL::Networking::V1; end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ip_block.rb#2
class KubeDSL::DSL::Networking::V1::IPBlock < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def cidr(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def except(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ip_block.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/ip_block.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1/network_policy.rb#2
class KubeDSL::DSL::Networking::V1::NetworkPolicy < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/network_policy.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/network_policy.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1/network_policy_egress_rule.rb#2
class KubeDSL::DSL::Networking::V1::NetworkPolicyEgressRule < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/network_policy_egress_rule.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def port(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def ports; end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/network_policy_egress_rule.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def to(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def tos; end
end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1/network_policy_ingress_rule.rb#2
class KubeDSL::DSL::Networking::V1::NetworkPolicyIngressRule < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def from(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def froms; end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/network_policy_ingress_rule.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def port(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def ports; end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/network_policy_ingress_rule.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1/network_policy_list.rb#2
class KubeDSL::DSL::Networking::V1::NetworkPolicyList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/network_policy_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/network_policy_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1/network_policy_peer.rb#2
class KubeDSL::DSL::Networking::V1::NetworkPolicyPeer < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def ip_block(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/network_policy_peer.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def namespace_selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def pod_selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/network_policy_peer.rb#11
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1/network_policy_port.rb#2
class KubeDSL::DSL::Networking::V1::NetworkPolicyPort < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/network_policy_port.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def port(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def protocol(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/network_policy_port.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1/network_policy_spec.rb#2
class KubeDSL::DSL::Networking::V1::NetworkPolicySpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def egress(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def egresses; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def ingress(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def ingresses; end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/network_policy_spec.rb#22
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def pod_selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def policy_types(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1/network_policy_spec.rb#13
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1beta1.rb#1
module KubeDSL::DSL::Networking::V1beta1; end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1beta1/http_ingress_path.rb#2
class KubeDSL::DSL::Networking::V1beta1::HTTPIngressPath < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def backend(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1beta1/http_ingress_path.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def path(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1beta1/http_ingress_path.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1beta1/http_ingress_rule_value.rb#2
class KubeDSL::DSL::Networking::V1beta1::HTTPIngressRuleValue < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1beta1/http_ingress_rule_value.rb#13
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def path(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def paths; end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1beta1/http_ingress_rule_value.rb#7
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1beta1/ingress.rb#2
class KubeDSL::DSL::Networking::V1beta1::Ingress < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1beta1/ingress.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1beta1/ingress.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def status(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1beta1/ingress_backend.rb#2
class KubeDSL::DSL::Networking::V1beta1::IngressBackend < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1beta1/ingress_backend.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1beta1/ingress_backend.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def service_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def service_port(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1beta1/ingress_list.rb#2
class KubeDSL::DSL::Networking::V1beta1::IngressList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1beta1/ingress_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1beta1/ingress_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1beta1/ingress_rule.rb#2
class KubeDSL::DSL::Networking::V1beta1::IngressRule < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def host(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def http(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1beta1/ingress_rule.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1beta1/ingress_rule.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1beta1/ingress_spec.rb#2
class KubeDSL::DSL::Networking::V1beta1::IngressSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def backend(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1beta1/ingress_spec.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def rule(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def rules; end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1beta1/ingress_spec.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def tls(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def tlses; end
end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1beta1/ingress_status.rb#2
class KubeDSL::DSL::Networking::V1beta1::IngressStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1beta1/ingress_status.rb#13
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def load_balancer(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1beta1/ingress_status.rb#7
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/networking/v1beta1/ingress_tls.rb#2
class KubeDSL::DSL::Networking::V1beta1::IngressTLS < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def hosts(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1beta1/ingress_tls.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def secret_name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/networking/v1beta1/ingress_tls.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/node.rb#1
module KubeDSL::DSL::Node; end

# source://kube-dsl//lib/kube-dsl/dsl/node/v1alpha1.rb#1
module KubeDSL::DSL::Node::V1alpha1; end

# source://kube-dsl//lib/kube-dsl/dsl/node/v1alpha1/overhead.rb#2
class KubeDSL::DSL::Node::V1alpha1::Overhead < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/node/v1alpha1/overhead.rb#13
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#46
  def pod_fixed(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1alpha1/overhead.rb#7
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/node/v1alpha1/runtime_class.rb#2
class KubeDSL::DSL::Node::V1alpha1::RuntimeClass < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/node/v1alpha1/runtime_class.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1alpha1/runtime_class.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/node/v1alpha1/runtime_class_list.rb#2
class KubeDSL::DSL::Node::V1alpha1::RuntimeClassList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1alpha1/runtime_class_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1alpha1/runtime_class_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/node/v1alpha1/runtime_class_spec.rb#2
class KubeDSL::DSL::Node::V1alpha1::RuntimeClassSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/node/v1alpha1/runtime_class_spec.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def overhead(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def runtime_handler(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def scheduling(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1alpha1/runtime_class_spec.rb#11
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/node/v1alpha1/scheduling.rb#2
class KubeDSL::DSL::Node::V1alpha1::Scheduling < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/node/v1alpha1/scheduling.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#46
  def node_selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1alpha1/scheduling.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def toleration(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def tolerations; end
end

# source://kube-dsl//lib/kube-dsl/dsl/node/v1beta1.rb#1
module KubeDSL::DSL::Node::V1beta1; end

# source://kube-dsl//lib/kube-dsl/dsl/node/v1beta1/overhead.rb#2
class KubeDSL::DSL::Node::V1beta1::Overhead < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/node/v1beta1/overhead.rb#13
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#46
  def pod_fixed(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1beta1/overhead.rb#7
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/node/v1beta1/runtime_class.rb#2
class KubeDSL::DSL::Node::V1beta1::RuntimeClass < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def handler(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1beta1/runtime_class.rb#24
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def overhead(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def scheduling(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1beta1/runtime_class.rb#13
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/node/v1beta1/runtime_class_list.rb#2
class KubeDSL::DSL::Node::V1beta1::RuntimeClassList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1beta1/runtime_class_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1beta1/runtime_class_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/node/v1beta1/scheduling.rb#2
class KubeDSL::DSL::Node::V1beta1::Scheduling < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/node/v1beta1/scheduling.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#46
  def node_selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/node/v1beta1/scheduling.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def toleration(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def tolerations; end
end

# source://kube-dsl//lib/kube-dsl/dsl/pkg.rb#1
module KubeDSL::DSL::Pkg; end

# source://kube-dsl//lib/kube-dsl/dsl/pkg/version.rb#1
module KubeDSL::DSL::Pkg::Version; end

# source://kube-dsl//lib/kube-dsl/dsl/pkg/version/info.rb#2
class KubeDSL::DSL::Pkg::Version::Info < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def build_date(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def compiler(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def git_commit(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def git_tree_state(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def git_version(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def go_version(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/pkg/version/info.rb#37
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def major(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def minor(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def platform(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/pkg/version/info.rb#23
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy.rb#1
module KubeDSL::DSL::Policy; end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1.rb#1
module KubeDSL::DSL::Policy::V1beta1; end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/allowed_csi_driver.rb#2
class KubeDSL::DSL::Policy::V1beta1::AllowedCSIDriver < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/allowed_csi_driver.rb#13
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/allowed_csi_driver.rb#7
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/allowed_flex_volume.rb#2
class KubeDSL::DSL::Policy::V1beta1::AllowedFlexVolume < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def driver(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/allowed_flex_volume.rb#13
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/allowed_flex_volume.rb#7
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/allowed_host_path.rb#2
class KubeDSL::DSL::Policy::V1beta1::AllowedHostPath < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/allowed_host_path.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def path_prefix(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def read_only(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/allowed_host_path.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/eviction.rb#2
class KubeDSL::DSL::Policy::V1beta1::Eviction < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def delete_options(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/eviction.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/eviction.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/fs_group_strategy_options.rb#2
class KubeDSL::DSL::Policy::V1beta1::FSGroupStrategyOptions < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/fs_group_strategy_options.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def range(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def ranges; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def rule(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/fs_group_strategy_options.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/host_port_range.rb#2
class KubeDSL::DSL::Policy::V1beta1::HostPortRange < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/host_port_range.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def max(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def min(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/host_port_range.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/id_range.rb#2
class KubeDSL::DSL::Policy::V1beta1::IDRange < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/id_range.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def max(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def min(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/id_range.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/pod_disruption_budget.rb#2
class KubeDSL::DSL::Policy::V1beta1::PodDisruptionBudget < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/pod_disruption_budget.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/pod_disruption_budget.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def status(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/pod_disruption_budget_list.rb#2
class KubeDSL::DSL::Policy::V1beta1::PodDisruptionBudgetList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/pod_disruption_budget_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/pod_disruption_budget_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/pod_disruption_budget_spec.rb#2
class KubeDSL::DSL::Policy::V1beta1::PodDisruptionBudgetSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/pod_disruption_budget_spec.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def max_unavailable(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def min_available(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/pod_disruption_budget_spec.rb#11
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/pod_disruption_budget_status.rb#2
class KubeDSL::DSL::Policy::V1beta1::PodDisruptionBudgetStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def current_healthy(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def desired_healthy(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#46
  def disrupted_pods(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def disruptions_allowed(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def expected_pods(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/pod_disruption_budget_status.rb#28
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def observed_generation(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/pod_disruption_budget_status.rb#17
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/pod_security_policy.rb#2
class KubeDSL::DSL::Policy::V1beta1::PodSecurityPolicy < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/pod_security_policy.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/pod_security_policy.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/pod_security_policy_list.rb#2
class KubeDSL::DSL::Policy::V1beta1::PodSecurityPolicyList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/pod_security_policy_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/pod_security_policy_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/pod_security_policy_spec.rb#2
class KubeDSL::DSL::Policy::V1beta1::PodSecurityPolicySpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def allow_privilege_escalation(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def allowed_capabilities(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def allowed_csi_driver(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def allowed_csi_drivers; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def allowed_flex_volume(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def allowed_flex_volumes; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def allowed_host_path(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def allowed_host_paths; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def allowed_proc_mount_types(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def allowed_unsafe_sysctls(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def default_add_capabilities(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def default_allow_privilege_escalation(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def forbidden_sysctls(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def fs_group(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def host_ipc(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def host_network(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def host_pid(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def host_port(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def host_ports; end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/pod_security_policy_spec.rb#82
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def privileged(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def read_only_root_filesystem(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def required_drop_capabilities(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def run_as_group(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def run_as_user(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def runtime_class(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def se_linux(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/pod_security_policy_spec.rb#53
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def supplemental_groups(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def volumes(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/run_as_group_strategy_options.rb#2
class KubeDSL::DSL::Policy::V1beta1::RunAsGroupStrategyOptions < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/run_as_group_strategy_options.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def range(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def ranges; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def rule(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/run_as_group_strategy_options.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/run_as_user_strategy_options.rb#2
class KubeDSL::DSL::Policy::V1beta1::RunAsUserStrategyOptions < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/run_as_user_strategy_options.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def range(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def ranges; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def rule(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/run_as_user_strategy_options.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/runtime_class_strategy_options.rb#2
class KubeDSL::DSL::Policy::V1beta1::RuntimeClassStrategyOptions < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def allowed_runtime_class_names(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def default_runtime_class_name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/runtime_class_strategy_options.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/runtime_class_strategy_options.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/se_linux_strategy_options.rb#2
class KubeDSL::DSL::Policy::V1beta1::SELinuxStrategyOptions < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/se_linux_strategy_options.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def rule(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def se_linux_options(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/se_linux_strategy_options.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/supplemental_groups_strategy_options.rb#2
class KubeDSL::DSL::Policy::V1beta1::SupplementalGroupsStrategyOptions < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/supplemental_groups_strategy_options.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def range(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def ranges; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def rule(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/policy/v1beta1/supplemental_groups_strategy_options.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/rbac.rb#1
module KubeDSL::DSL::Rbac; end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1.rb#1
module KubeDSL::DSL::Rbac::V1; end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/aggregation_rule.rb#2
class KubeDSL::DSL::Rbac::V1::AggregationRule < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def cluster_role_selector(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def cluster_role_selectors; end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/aggregation_rule.rb#13
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/aggregation_rule.rb#7
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/cluster_role.rb#2
class KubeDSL::DSL::Rbac::V1::ClusterRole < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def aggregation_rule(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/cluster_role.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def rule(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def rules; end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/cluster_role.rb#11
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/cluster_role_binding.rb#2
class KubeDSL::DSL::Rbac::V1::ClusterRoleBinding < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/cluster_role_binding.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def role_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/cluster_role_binding.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def subject(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def subjects; end
end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/cluster_role_binding_list.rb#2
class KubeDSL::DSL::Rbac::V1::ClusterRoleBindingList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/cluster_role_binding_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/cluster_role_binding_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/cluster_role_list.rb#2
class KubeDSL::DSL::Rbac::V1::ClusterRoleList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/cluster_role_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/cluster_role_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/policy_rule.rb#2
class KubeDSL::DSL::Rbac::V1::PolicyRule < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def api_groups(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/policy_rule.rb#25
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def non_resource_ur_ls(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def resource_names(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def resources(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/policy_rule.rb#15
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def verbs(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/role.rb#2
class KubeDSL::DSL::Rbac::V1::Role < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/role.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def rule(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def rules; end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/role.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/role_binding.rb#2
class KubeDSL::DSL::Rbac::V1::RoleBinding < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/role_binding.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def role_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/role_binding.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def subject(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def subjects; end
end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/role_binding_list.rb#2
class KubeDSL::DSL::Rbac::V1::RoleBindingList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/role_binding_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/role_binding_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/role_list.rb#2
class KubeDSL::DSL::Rbac::V1::RoleList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/role_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/role_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/role_ref.rb#2
class KubeDSL::DSL::Rbac::V1::RoleRef < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def api_group(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def kind(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/role_ref.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/role_ref.rb#11
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/subject.rb#2
class KubeDSL::DSL::Rbac::V1::Subject < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def api_group(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def kind(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/subject.rb#22
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def namespace(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1/subject.rb#13
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1alpha1.rb#1
module KubeDSL::DSL::Rbac::V1alpha1; end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1alpha1/aggregation_rule.rb#2
class KubeDSL::DSL::Rbac::V1alpha1::AggregationRule < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def cluster_role_selector(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def cluster_role_selectors; end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1alpha1/aggregation_rule.rb#13
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1alpha1/aggregation_rule.rb#7
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1alpha1/cluster_role.rb#2
class KubeDSL::DSL::Rbac::V1alpha1::ClusterRole < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def aggregation_rule(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1alpha1/cluster_role.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def rule(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def rules; end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1alpha1/cluster_role.rb#11
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1alpha1/cluster_role_binding.rb#2
class KubeDSL::DSL::Rbac::V1alpha1::ClusterRoleBinding < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1alpha1/cluster_role_binding.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def role_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1alpha1/cluster_role_binding.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def subject(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def subjects; end
end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1alpha1/cluster_role_binding_list.rb#2
class KubeDSL::DSL::Rbac::V1alpha1::ClusterRoleBindingList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1alpha1/cluster_role_binding_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1alpha1/cluster_role_binding_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1alpha1/cluster_role_list.rb#2
class KubeDSL::DSL::Rbac::V1alpha1::ClusterRoleList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1alpha1/cluster_role_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1alpha1/cluster_role_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1alpha1/policy_rule.rb#2
class KubeDSL::DSL::Rbac::V1alpha1::PolicyRule < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def api_groups(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1alpha1/policy_rule.rb#25
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def non_resource_ur_ls(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def resource_names(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def resources(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1alpha1/policy_rule.rb#15
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def verbs(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1alpha1/role.rb#2
class KubeDSL::DSL::Rbac::V1alpha1::Role < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1alpha1/role.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def rule(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def rules; end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1alpha1/role.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1alpha1/role_binding.rb#2
class KubeDSL::DSL::Rbac::V1alpha1::RoleBinding < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1alpha1/role_binding.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def role_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1alpha1/role_binding.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def subject(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def subjects; end
end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1alpha1/role_binding_list.rb#2
class KubeDSL::DSL::Rbac::V1alpha1::RoleBindingList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1alpha1/role_binding_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1alpha1/role_binding_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1alpha1/role_list.rb#2
class KubeDSL::DSL::Rbac::V1alpha1::RoleList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1alpha1/role_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1alpha1/role_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1alpha1/role_ref.rb#2
class KubeDSL::DSL::Rbac::V1alpha1::RoleRef < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def api_group(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def kind(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1alpha1/role_ref.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1alpha1/role_ref.rb#11
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1alpha1/subject.rb#2
class KubeDSL::DSL::Rbac::V1alpha1::Subject < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def api_version(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def kind(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1alpha1/subject.rb#22
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def namespace(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1alpha1/subject.rb#13
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1beta1.rb#1
module KubeDSL::DSL::Rbac::V1beta1; end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1beta1/aggregation_rule.rb#2
class KubeDSL::DSL::Rbac::V1beta1::AggregationRule < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def cluster_role_selector(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def cluster_role_selectors; end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1beta1/aggregation_rule.rb#13
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1beta1/aggregation_rule.rb#7
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1beta1/cluster_role.rb#2
class KubeDSL::DSL::Rbac::V1beta1::ClusterRole < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def aggregation_rule(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1beta1/cluster_role.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def rule(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def rules; end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1beta1/cluster_role.rb#11
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1beta1/cluster_role_binding.rb#2
class KubeDSL::DSL::Rbac::V1beta1::ClusterRoleBinding < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1beta1/cluster_role_binding.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def role_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1beta1/cluster_role_binding.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def subject(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def subjects; end
end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1beta1/cluster_role_binding_list.rb#2
class KubeDSL::DSL::Rbac::V1beta1::ClusterRoleBindingList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1beta1/cluster_role_binding_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1beta1/cluster_role_binding_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1beta1/cluster_role_list.rb#2
class KubeDSL::DSL::Rbac::V1beta1::ClusterRoleList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1beta1/cluster_role_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1beta1/cluster_role_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1beta1/policy_rule.rb#2
class KubeDSL::DSL::Rbac::V1beta1::PolicyRule < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def api_groups(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1beta1/policy_rule.rb#25
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def non_resource_ur_ls(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def resource_names(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def resources(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1beta1/policy_rule.rb#15
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def verbs(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1beta1/role.rb#2
class KubeDSL::DSL::Rbac::V1beta1::Role < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1beta1/role.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def rule(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def rules; end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1beta1/role.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1beta1/role_binding.rb#2
class KubeDSL::DSL::Rbac::V1beta1::RoleBinding < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1beta1/role_binding.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def role_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1beta1/role_binding.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def subject(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def subjects; end
end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1beta1/role_binding_list.rb#2
class KubeDSL::DSL::Rbac::V1beta1::RoleBindingList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1beta1/role_binding_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1beta1/role_binding_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1beta1/role_list.rb#2
class KubeDSL::DSL::Rbac::V1beta1::RoleList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1beta1/role_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1beta1/role_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1beta1/role_ref.rb#2
class KubeDSL::DSL::Rbac::V1beta1::RoleRef < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def api_group(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def kind(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1beta1/role_ref.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1beta1/role_ref.rb#11
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/rbac/v1beta1/subject.rb#2
class KubeDSL::DSL::Rbac::V1beta1::Subject < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def api_group(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def kind(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1beta1/subject.rb#22
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def namespace(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/rbac/v1beta1/subject.rb#13
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/scheduling.rb#1
module KubeDSL::DSL::Scheduling; end

# source://kube-dsl//lib/kube-dsl/dsl/scheduling/v1.rb#1
module KubeDSL::DSL::Scheduling::V1; end

# source://kube-dsl//lib/kube-dsl/dsl/scheduling/v1/priority_class.rb#2
class KubeDSL::DSL::Scheduling::V1::PriorityClass < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def description(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def global_default(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/scheduling/v1/priority_class.rb#27
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def preemption_policy(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/scheduling/v1/priority_class.rb#15
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def value(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/scheduling/v1/priority_class_list.rb#2
class KubeDSL::DSL::Scheduling::V1::PriorityClassList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/scheduling/v1/priority_class_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/scheduling/v1/priority_class_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/scheduling/v1alpha1.rb#1
module KubeDSL::DSL::Scheduling::V1alpha1; end

# source://kube-dsl//lib/kube-dsl/dsl/scheduling/v1alpha1/priority_class.rb#2
class KubeDSL::DSL::Scheduling::V1alpha1::PriorityClass < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def description(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def global_default(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/scheduling/v1alpha1/priority_class.rb#27
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def preemption_policy(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/scheduling/v1alpha1/priority_class.rb#15
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def value(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/scheduling/v1alpha1/priority_class_list.rb#2
class KubeDSL::DSL::Scheduling::V1alpha1::PriorityClassList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/scheduling/v1alpha1/priority_class_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/scheduling/v1alpha1/priority_class_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/scheduling/v1beta1.rb#1
module KubeDSL::DSL::Scheduling::V1beta1; end

# source://kube-dsl//lib/kube-dsl/dsl/scheduling/v1beta1/priority_class.rb#2
class KubeDSL::DSL::Scheduling::V1beta1::PriorityClass < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def description(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def global_default(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/scheduling/v1beta1/priority_class.rb#27
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def preemption_policy(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/scheduling/v1beta1/priority_class.rb#15
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def value(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/scheduling/v1beta1/priority_class_list.rb#2
class KubeDSL::DSL::Scheduling::V1beta1::PriorityClassList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/scheduling/v1beta1/priority_class_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/scheduling/v1beta1/priority_class_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/settings.rb#1
module KubeDSL::DSL::Settings; end

# source://kube-dsl//lib/kube-dsl/dsl/settings/v1alpha1.rb#1
module KubeDSL::DSL::Settings::V1alpha1; end

# source://kube-dsl//lib/kube-dsl/dsl/settings/v1alpha1/pod_preset.rb#2
class KubeDSL::DSL::Settings::V1alpha1::PodPreset < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/settings/v1alpha1/pod_preset.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/settings/v1alpha1/pod_preset.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/settings/v1alpha1/pod_preset_list.rb#2
class KubeDSL::DSL::Settings::V1alpha1::PodPresetList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/settings/v1alpha1/pod_preset_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/settings/v1alpha1/pod_preset_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/settings/v1alpha1/pod_preset_spec.rb#2
class KubeDSL::DSL::Settings::V1alpha1::PodPresetSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def env(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def env_from(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def env_froms; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def envs; end

  # source://kube-dsl//lib/kube-dsl/dsl/settings/v1alpha1/pod_preset_spec.rb#25
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/settings/v1alpha1/pod_preset_spec.rb#15
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def volume(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def volume_mount(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def volume_mounts; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def volumes; end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage.rb#1
module KubeDSL::DSL::Storage; end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1.rb#1
module KubeDSL::DSL::Storage::V1; end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1/csi_node.rb#2
class KubeDSL::DSL::Storage::V1::CSINode < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/csi_node.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/csi_node.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1/csi_node_driver.rb#2
class KubeDSL::DSL::Storage::V1::CSINodeDriver < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def allocatable(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/csi_node_driver.rb#22
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def node_id(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/csi_node_driver.rb#13
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def topology_keys(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1/csi_node_list.rb#2
class KubeDSL::DSL::Storage::V1::CSINodeList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/csi_node_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/csi_node_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1/csi_node_spec.rb#2
class KubeDSL::DSL::Storage::V1::CSINodeSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def driver(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def drivers; end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/csi_node_spec.rb#13
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/csi_node_spec.rb#7
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1/storage_class.rb#2
class KubeDSL::DSL::Storage::V1::StorageClass < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def allow_volume_expansion(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def allowed_topologies; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def allowed_topology(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/storage_class.rb#36
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def mount_options(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#46
  def parameters(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def provisioner(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def reclaim_policy(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/storage_class.rb#21
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def volume_binding_mode(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1/storage_class_list.rb#2
class KubeDSL::DSL::Storage::V1::StorageClassList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/storage_class_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/storage_class_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1/volume_attachment.rb#2
class KubeDSL::DSL::Storage::V1::VolumeAttachment < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/volume_attachment.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/volume_attachment.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def status(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1/volume_attachment_list.rb#2
class KubeDSL::DSL::Storage::V1::VolumeAttachmentList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/volume_attachment_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/volume_attachment_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1/volume_attachment_source.rb#2
class KubeDSL::DSL::Storage::V1::VolumeAttachmentSource < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def inline_volume_spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/volume_attachment_source.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def persistent_volume_name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/volume_attachment_source.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1/volume_attachment_spec.rb#2
class KubeDSL::DSL::Storage::V1::VolumeAttachmentSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def attacher(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/volume_attachment_spec.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def node_name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/volume_attachment_spec.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def source(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1/volume_attachment_status.rb#2
class KubeDSL::DSL::Storage::V1::VolumeAttachmentStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def attach_error(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def attached(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#46
  def attachment_metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def detach_error(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/volume_attachment_status.rb#22
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/volume_attachment_status.rb#13
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1/volume_error.rb#2
class KubeDSL::DSL::Storage::V1::VolumeError < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/volume_error.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/volume_error.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def time(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1/volume_node_resources.rb#2
class KubeDSL::DSL::Storage::V1::VolumeNodeResources < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def count(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/volume_node_resources.rb#13
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1/volume_node_resources.rb#7
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1alpha1.rb#1
module KubeDSL::DSL::Storage::V1alpha1; end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1alpha1/volume_attachment.rb#2
class KubeDSL::DSL::Storage::V1alpha1::VolumeAttachment < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1alpha1/volume_attachment.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1alpha1/volume_attachment.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def status(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1alpha1/volume_attachment_list.rb#2
class KubeDSL::DSL::Storage::V1alpha1::VolumeAttachmentList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1alpha1/volume_attachment_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1alpha1/volume_attachment_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1alpha1/volume_attachment_source.rb#2
class KubeDSL::DSL::Storage::V1alpha1::VolumeAttachmentSource < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def inline_volume_spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1alpha1/volume_attachment_source.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def persistent_volume_name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1alpha1/volume_attachment_source.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1alpha1/volume_attachment_spec.rb#2
class KubeDSL::DSL::Storage::V1alpha1::VolumeAttachmentSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def attacher(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1alpha1/volume_attachment_spec.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def node_name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1alpha1/volume_attachment_spec.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def source(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1alpha1/volume_attachment_status.rb#2
class KubeDSL::DSL::Storage::V1alpha1::VolumeAttachmentStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def attach_error(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def attached(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#46
  def attachment_metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def detach_error(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1alpha1/volume_attachment_status.rb#22
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1alpha1/volume_attachment_status.rb#13
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1alpha1/volume_error.rb#2
class KubeDSL::DSL::Storage::V1alpha1::VolumeError < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1alpha1/volume_error.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1alpha1/volume_error.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def time(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1beta1.rb#1
module KubeDSL::DSL::Storage::V1beta1; end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1beta1/csi_driver.rb#2
class KubeDSL::DSL::Storage::V1beta1::CSIDriver < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1beta1/csi_driver.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1beta1/csi_driver.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1beta1/csi_driver_list.rb#2
class KubeDSL::DSL::Storage::V1beta1::CSIDriverList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1beta1/csi_driver_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1beta1/csi_driver_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1beta1/csi_driver_spec.rb#2
class KubeDSL::DSL::Storage::V1beta1::CSIDriverSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def attach_required(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1beta1/csi_driver_spec.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def pod_info_on_mount(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1beta1/csi_driver_spec.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def volume_lifecycle_modes(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1beta1/csi_node.rb#2
class KubeDSL::DSL::Storage::V1beta1::CSINode < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1beta1/csi_node.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1beta1/csi_node.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1beta1/csi_node_driver.rb#2
class KubeDSL::DSL::Storage::V1beta1::CSINodeDriver < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def allocatable(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1beta1/csi_node_driver.rb#22
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def node_id(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1beta1/csi_node_driver.rb#13
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def topology_keys(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1beta1/csi_node_list.rb#2
class KubeDSL::DSL::Storage::V1beta1::CSINodeList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1beta1/csi_node_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1beta1/csi_node_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1beta1/csi_node_spec.rb#2
class KubeDSL::DSL::Storage::V1beta1::CSINodeSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def driver(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def drivers; end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1beta1/csi_node_spec.rb#13
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1beta1/csi_node_spec.rb#7
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1beta1/storage_class.rb#2
class KubeDSL::DSL::Storage::V1beta1::StorageClass < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def allow_volume_expansion(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def allowed_topologies; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def allowed_topology(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1beta1/storage_class.rb#36
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def mount_options(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#46
  def parameters(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def provisioner(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def reclaim_policy(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1beta1/storage_class.rb#21
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def volume_binding_mode(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1beta1/storage_class_list.rb#2
class KubeDSL::DSL::Storage::V1beta1::StorageClassList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1beta1/storage_class_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1beta1/storage_class_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1beta1/volume_attachment.rb#2
class KubeDSL::DSL::Storage::V1beta1::VolumeAttachment < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1beta1/volume_attachment.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1beta1/volume_attachment.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def status(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1beta1/volume_attachment_list.rb#2
class KubeDSL::DSL::Storage::V1beta1::VolumeAttachmentList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1beta1/volume_attachment_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1beta1/volume_attachment_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1beta1/volume_attachment_source.rb#2
class KubeDSL::DSL::Storage::V1beta1::VolumeAttachmentSource < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def inline_volume_spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1beta1/volume_attachment_source.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def persistent_volume_name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1beta1/volume_attachment_source.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1beta1/volume_attachment_spec.rb#2
class KubeDSL::DSL::Storage::V1beta1::VolumeAttachmentSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def attacher(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1beta1/volume_attachment_spec.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def node_name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1beta1/volume_attachment_spec.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def source(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1beta1/volume_attachment_status.rb#2
class KubeDSL::DSL::Storage::V1beta1::VolumeAttachmentStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def attach_error(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def attached(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#46
  def attachment_metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def detach_error(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1beta1/volume_attachment_status.rb#22
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1beta1/volume_attachment_status.rb#13
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1beta1/volume_error.rb#2
class KubeDSL::DSL::Storage::V1beta1::VolumeError < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1beta1/volume_error.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1beta1/volume_error.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def time(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/storage/v1beta1/volume_node_resources.rb#2
class KubeDSL::DSL::Storage::V1beta1::VolumeNodeResources < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def count(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1beta1/volume_node_resources.rb#13
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/storage/v1beta1/volume_node_resources.rb#7
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1.rb#1
module KubeDSL::DSL::V1; end

# source://kube-dsl//lib/kube-dsl/dsl/v1/aws_elastic_block_store_volume_source.rb#2
class KubeDSL::DSL::V1::AWSElasticBlockStoreVolumeSource < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def fs_type(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/aws_elastic_block_store_volume_source.rb#22
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def partition(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def read_only(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/aws_elastic_block_store_volume_source.rb#13
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def volume_id(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/affinity.rb#2
class KubeDSL::DSL::V1::Affinity < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/affinity.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def node_affinity(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def pod_affinity(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def pod_anti_affinity(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/affinity.rb#11
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/attached_volume.rb#2
class KubeDSL::DSL::V1::AttachedVolume < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def device_path(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/attached_volume.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/attached_volume.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/azure_disk_volume_source.rb#2
class KubeDSL::DSL::V1::AzureDiskVolumeSource < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def caching_mode(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def disk_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def disk_uri(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def fs_type(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def kind(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/azure_disk_volume_source.rb#28
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def read_only(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/azure_disk_volume_source.rb#17
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/azure_file_persistent_volume_source.rb#2
class KubeDSL::DSL::V1::AzureFilePersistentVolumeSource < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/azure_file_persistent_volume_source.rb#22
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def read_only(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def secret_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def secret_namespace(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/azure_file_persistent_volume_source.rb#13
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def share_name(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/azure_file_volume_source.rb#2
class KubeDSL::DSL::V1::AzureFileVolumeSource < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/azure_file_volume_source.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def read_only(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def secret_name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/azure_file_volume_source.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def share_name(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/binding.rb#2
class KubeDSL::DSL::V1::Binding < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/binding.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/binding.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def target(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/csi_persistent_volume_source.rb#2
class KubeDSL::DSL::V1::CSIPersistentVolumeSource < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def controller_expand_secret_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def controller_publish_secret_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def driver(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def fs_type(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/csi_persistent_volume_source.rb#37
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def node_publish_secret_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def node_stage_secret_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def read_only(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/csi_persistent_volume_source.rb#23
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#46
  def volume_attributes(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def volume_handle(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/csi_volume_source.rb#2
class KubeDSL::DSL::V1::CSIVolumeSource < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def driver(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def fs_type(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/csi_volume_source.rb#25
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def node_publish_secret_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def read_only(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/csi_volume_source.rb#15
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#46
  def volume_attributes(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/capabilities.rb#2
class KubeDSL::DSL::V1::Capabilities < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def add(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def drop(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/capabilities.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/capabilities.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/ceph_fs_persistent_volume_source.rb#2
class KubeDSL::DSL::V1::CephFSPersistentVolumeSource < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/ceph_fs_persistent_volume_source.rb#28
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def monitors(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def path(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def read_only(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def secret_file(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def secret_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/ceph_fs_persistent_volume_source.rb#17
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def user(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/ceph_fs_volume_source.rb#2
class KubeDSL::DSL::V1::CephFSVolumeSource < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/ceph_fs_volume_source.rb#28
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def monitors(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def path(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def read_only(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def secret_file(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def secret_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/ceph_fs_volume_source.rb#17
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def user(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/cinder_persistent_volume_source.rb#2
class KubeDSL::DSL::V1::CinderPersistentVolumeSource < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def fs_type(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/cinder_persistent_volume_source.rb#22
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def read_only(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def secret_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/cinder_persistent_volume_source.rb#13
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def volume_id(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/cinder_volume_source.rb#2
class KubeDSL::DSL::V1::CinderVolumeSource < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def fs_type(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/cinder_volume_source.rb#22
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def read_only(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def secret_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/cinder_volume_source.rb#13
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def volume_id(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/client_ip_config.rb#2
class KubeDSL::DSL::V1::ClientIPConfig < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/client_ip_config.rb#13
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/client_ip_config.rb#7
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def timeout_seconds(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/component_condition.rb#2
class KubeDSL::DSL::V1::ComponentCondition < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def error(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/component_condition.rb#22
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/component_condition.rb#13
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def status(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/component_status.rb#2
class KubeDSL::DSL::V1::ComponentStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def condition(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def conditions; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/component_status.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/component_status.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/component_status_list.rb#2
class KubeDSL::DSL::V1::ComponentStatusList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/component_status_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/component_status_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/config_map.rb#2
class KubeDSL::DSL::V1::ConfigMap < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#46
  def binary_data(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#46
  def data(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/config_map.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/config_map.rb#11
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/config_map_env_source.rb#2
class KubeDSL::DSL::V1::ConfigMapEnvSource < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/config_map_env_source.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def optional(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/config_map_env_source.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/config_map_key_selector.rb#2
class KubeDSL::DSL::V1::ConfigMapKeySelector < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def key(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/config_map_key_selector.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def optional(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/config_map_key_selector.rb#11
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/config_map_list.rb#2
class KubeDSL::DSL::V1::ConfigMapList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/config_map_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/config_map_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/config_map_node_config_source.rb#2
class KubeDSL::DSL::V1::ConfigMapNodeConfigSource < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/config_map_node_config_source.rb#25
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def kubelet_config_key(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def namespace(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def resource_version(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/config_map_node_config_source.rb#15
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def uid(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/config_map_projection.rb#2
class KubeDSL::DSL::V1::ConfigMapProjection < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/config_map_projection.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def optional(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/config_map_projection.rb#11
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/config_map_volume_source.rb#2
class KubeDSL::DSL::V1::ConfigMapVolumeSource < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def default_mode(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/config_map_volume_source.rb#22
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def optional(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/config_map_volume_source.rb#13
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/container.rb#2
class KubeDSL::DSL::V1::Container < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def args(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def command(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def env(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def env_from(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def env_froms; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def envs; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def image(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def image_pull_policy(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/container.rb#76
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def lifecycle(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def liveness_probe(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def port(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def ports; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def readiness_probe(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def resources(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def security_context(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/container.rb#49
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def startup_probe(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def stdin(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def stdin_once(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def termination_message_path(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def termination_message_policy(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def tty(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def volume_device(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def volume_devices; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def volume_mount(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def volume_mounts; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def working_dir(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/container_image.rb#2
class KubeDSL::DSL::V1::ContainerImage < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/container_image.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def names(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/container_image.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def size_bytes(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/container_port.rb#2
class KubeDSL::DSL::V1::ContainerPort < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def container_port(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def host_ip(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def host_port(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/container_port.rb#25
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def protocol(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/container_port.rb#15
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/container_state.rb#2
class KubeDSL::DSL::V1::ContainerState < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/container_state.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def running(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/container_state.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def terminated(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def waiting(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/container_state_running.rb#2
class KubeDSL::DSL::V1::ContainerStateRunning < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/container_state_running.rb#13
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/container_state_running.rb#7
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def started_at(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/container_state_terminated.rb#2
class KubeDSL::DSL::V1::ContainerStateTerminated < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def container_id(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def exit_code(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def finished_at(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/container_state_terminated.rb#31
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/container_state_terminated.rb#19
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def signal(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def started_at(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/container_state_waiting.rb#2
class KubeDSL::DSL::V1::ContainerStateWaiting < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/container_state_waiting.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/container_state_waiting.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/container_status.rb#2
class KubeDSL::DSL::V1::ContainerStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def container_id(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def image(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def image_id(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/container_status.rb#37
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def last_state(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def ready(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def restart_count(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/container_status.rb#23
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def started(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def state(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/daemon_endpoint.rb#2
class KubeDSL::DSL::V1::DaemonEndpoint < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/daemon_endpoint.rb#13
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def port(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/daemon_endpoint.rb#7
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/downward_api_projection.rb#2
class KubeDSL::DSL::V1::DownwardAPIProjection < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/downward_api_projection.rb#13
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/downward_api_projection.rb#7
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/downward_api_volume_file.rb#2
class KubeDSL::DSL::V1::DownwardAPIVolumeFile < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def field_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/downward_api_volume_file.rb#22
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def mode(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def path(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def resource_field_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/downward_api_volume_file.rb#13
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/downward_api_volume_source.rb#2
class KubeDSL::DSL::V1::DownwardAPIVolumeSource < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def default_mode(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/downward_api_volume_source.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/downward_api_volume_source.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/empty_dir_volume_source.rb#2
class KubeDSL::DSL::V1::EmptyDirVolumeSource < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/empty_dir_volume_source.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def medium(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/empty_dir_volume_source.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def size_limit(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/endpoint_address.rb#2
class KubeDSL::DSL::V1::EndpointAddress < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def hostname(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def ip(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/endpoint_address.rb#22
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def node_name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/endpoint_address.rb#13
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def target_ref(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/endpoint_port.rb#2
class KubeDSL::DSL::V1::EndpointPort < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/endpoint_port.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def port(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def protocol(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/endpoint_port.rb#11
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/endpoint_subset.rb#2
class KubeDSL::DSL::V1::EndpointSubset < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def address(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def addresses; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/endpoint_subset.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def not_ready_address(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def not_ready_addresses; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def port(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def ports; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/endpoint_subset.rb#11
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/endpoints.rb#2
class KubeDSL::DSL::V1::Endpoints < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/endpoints.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/endpoints.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def subset(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def subsets; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/endpoints_list.rb#2
class KubeDSL::DSL::V1::EndpointsList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/endpoints_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/endpoints_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/env_from_source.rb#2
class KubeDSL::DSL::V1::EnvFromSource < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def config_map_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/env_from_source.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def prefix(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def secret_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/env_from_source.rb#11
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/env_var.rb#2
class KubeDSL::DSL::V1::EnvVar < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/env_var.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/env_var.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def value(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def value_from(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/env_var_source.rb#2
class KubeDSL::DSL::V1::EnvVarSource < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def config_map_key_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def field_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/env_var_source.rb#22
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def resource_field_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def secret_key_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/env_var_source.rb#13
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/ephemeral_container.rb#2
class KubeDSL::DSL::V1::EphemeralContainer < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def args(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def command(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def env(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def env_from(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def env_froms; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def envs; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def image(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def image_pull_policy(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/ephemeral_container.rb#79
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def lifecycle(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def liveness_probe(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def port(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def ports; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def readiness_probe(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def resources(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def security_context(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/ephemeral_container.rb#51
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def startup_probe(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def stdin(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def stdin_once(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def target_container_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def termination_message_path(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def termination_message_policy(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def tty(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def volume_device(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def volume_devices; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def volume_mount(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def volume_mounts; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def working_dir(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/event.rb#2
class KubeDSL::DSL::V1::Event < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def action(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def count(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def event_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def first_timestamp(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def involved_object(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/event.rb#57
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def last_timestamp(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def related(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def reporting_component(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def reporting_instance(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/event.rb#35
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def series(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def source(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/event_list.rb#2
class KubeDSL::DSL::V1::EventList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/event_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/event_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/event_series.rb#2
class KubeDSL::DSL::V1::EventSeries < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def count(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/event_series.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def last_observed_time(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/event_series.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def state(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/event_source.rb#2
class KubeDSL::DSL::V1::EventSource < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def component(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def host(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/event_source.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/event_source.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/exec_action.rb#2
class KubeDSL::DSL::V1::ExecAction < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def command(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/exec_action.rb#13
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/exec_action.rb#7
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/fc_volume_source.rb#2
class KubeDSL::DSL::V1::FCVolumeSource < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def fs_type(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/fc_volume_source.rb#25
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def lun(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def read_only(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/fc_volume_source.rb#15
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def target_ww_ns(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def wwids(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/flex_persistent_volume_source.rb#2
class KubeDSL::DSL::V1::FlexPersistentVolumeSource < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def driver(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def fs_type(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/flex_persistent_volume_source.rb#25
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#46
  def options(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def read_only(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def secret_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/flex_persistent_volume_source.rb#15
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/flex_volume_source.rb#2
class KubeDSL::DSL::V1::FlexVolumeSource < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def driver(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def fs_type(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/flex_volume_source.rb#25
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#46
  def options(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def read_only(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def secret_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/flex_volume_source.rb#15
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/flocker_volume_source.rb#2
class KubeDSL::DSL::V1::FlockerVolumeSource < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def dataset_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def dataset_uuid(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/flocker_volume_source.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/flocker_volume_source.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/gce_persistent_disk_volume_source.rb#2
class KubeDSL::DSL::V1::GCEPersistentDiskVolumeSource < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def fs_type(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/gce_persistent_disk_volume_source.rb#22
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def partition(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def pd_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def read_only(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/gce_persistent_disk_volume_source.rb#13
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/git_repo_volume_source.rb#2
class KubeDSL::DSL::V1::GitRepoVolumeSource < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def directory(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/git_repo_volume_source.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def repository(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def revision(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/git_repo_volume_source.rb#11
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/glusterfs_persistent_volume_source.rb#2
class KubeDSL::DSL::V1::GlusterfsPersistentVolumeSource < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def endpoints(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def endpoints_namespace(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/glusterfs_persistent_volume_source.rb#22
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def path(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def read_only(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/glusterfs_persistent_volume_source.rb#13
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/glusterfs_volume_source.rb#2
class KubeDSL::DSL::V1::GlusterfsVolumeSource < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def endpoints(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/glusterfs_volume_source.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def path(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def read_only(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/glusterfs_volume_source.rb#11
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/http_get_action.rb#2
class KubeDSL::DSL::V1::HTTPGetAction < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def host(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def http_header(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def http_headers; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/http_get_action.rb#25
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def path(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def port(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def scheme(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/http_get_action.rb#15
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/http_header.rb#2
class KubeDSL::DSL::V1::HTTPHeader < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/http_header.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/http_header.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def value(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/handler.rb#2
class KubeDSL::DSL::V1::Handler < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def exec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def http_get(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/handler.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/handler.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def tcp_socket(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/host_alias.rb#2
class KubeDSL::DSL::V1::HostAlias < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def hostnames(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def ip(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/host_alias.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/host_alias.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/host_path_volume_source.rb#2
class KubeDSL::DSL::V1::HostPathVolumeSource < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/host_path_volume_source.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def path(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/host_path_volume_source.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/iscsi_persistent_volume_source.rb#2
class KubeDSL::DSL::V1::ISCSIPersistentVolumeSource < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def chap_auth_discovery(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def chap_auth_session(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def fs_type(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def initiator_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def iqn(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def iscsi_interface(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/iscsi_persistent_volume_source.rb#43
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def lun(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def portals(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def read_only(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def secret_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/iscsi_persistent_volume_source.rb#27
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def target_portal(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/iscsi_volume_source.rb#2
class KubeDSL::DSL::V1::ISCSIVolumeSource < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def chap_auth_discovery(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def chap_auth_session(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def fs_type(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def initiator_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def iqn(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def iscsi_interface(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/iscsi_volume_source.rb#43
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def lun(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def portals(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def read_only(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def secret_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/iscsi_volume_source.rb#27
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def target_portal(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/key_to_path.rb#2
class KubeDSL::DSL::V1::KeyToPath < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def key(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/key_to_path.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def mode(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def path(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/key_to_path.rb#11
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/lifecycle.rb#2
class KubeDSL::DSL::V1::Lifecycle < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/lifecycle.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def post_start(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def pre_stop(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/lifecycle.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/limit_range.rb#2
class KubeDSL::DSL::V1::LimitRange < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/limit_range.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/limit_range.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/limit_range_item.rb#2
class KubeDSL::DSL::V1::LimitRangeItem < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#46
  def default(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#46
  def default_request(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/limit_range_item.rb#28
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#46
  def max(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#46
  def max_limit_request_ratio(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#46
  def min(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/limit_range_item.rb#17
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/limit_range_list.rb#2
class KubeDSL::DSL::V1::LimitRangeList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/limit_range_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/limit_range_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/limit_range_spec.rb#2
class KubeDSL::DSL::V1::LimitRangeSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/limit_range_spec.rb#13
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def limit(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def limits; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/limit_range_spec.rb#7
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/load_balancer_ingress.rb#2
class KubeDSL::DSL::V1::LoadBalancerIngress < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def hostname(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def ip(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/load_balancer_ingress.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/load_balancer_ingress.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/load_balancer_status.rb#2
class KubeDSL::DSL::V1::LoadBalancerStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def ingress(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def ingresses; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/load_balancer_status.rb#13
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/load_balancer_status.rb#7
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/local_object_reference.rb#2
class KubeDSL::DSL::V1::LocalObjectReference < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/local_object_reference.rb#13
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/local_object_reference.rb#7
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/local_volume_source.rb#2
class KubeDSL::DSL::V1::LocalVolumeSource < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def fs_type(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/local_volume_source.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def path(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/local_volume_source.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/nfs_volume_source.rb#2
class KubeDSL::DSL::V1::NFSVolumeSource < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/nfs_volume_source.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def path(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def read_only(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/nfs_volume_source.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def server(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/namespace.rb#2
class KubeDSL::DSL::V1::Namespace < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/namespace.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/namespace.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def status(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/namespace_condition.rb#2
class KubeDSL::DSL::V1::NamespaceCondition < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/namespace_condition.rb#25
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def last_transition_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/namespace_condition.rb#15
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def status(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/namespace_list.rb#2
class KubeDSL::DSL::V1::NamespaceList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/namespace_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/namespace_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/namespace_spec.rb#2
class KubeDSL::DSL::V1::NamespaceSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def finalizers(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/namespace_spec.rb#13
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/namespace_spec.rb#7
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/namespace_status.rb#2
class KubeDSL::DSL::V1::NamespaceStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def condition(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def conditions; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/namespace_status.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def phase(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/namespace_status.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/node.rb#2
class KubeDSL::DSL::V1::Node < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/node.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def status(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/node_address.rb#2
class KubeDSL::DSL::V1::NodeAddress < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def address(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_address.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_address.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/node_affinity.rb#2
class KubeDSL::DSL::V1::NodeAffinity < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_affinity.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def preferred_during_scheduling_ignored_during_execution(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def preferred_during_scheduling_ignored_during_executions; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def required_during_scheduling_ignored_during_execution(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_affinity.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/node_condition.rb#2
class KubeDSL::DSL::V1::NodeCondition < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_condition.rb#28
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def last_heartbeat_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def last_transition_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_condition.rb#17
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def status(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/node_config_source.rb#2
class KubeDSL::DSL::V1::NodeConfigSource < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def config_map(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_config_source.rb#13
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_config_source.rb#7
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/node_config_status.rb#2
class KubeDSL::DSL::V1::NodeConfigStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def active(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def assigned(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def error(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_config_status.rb#22
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def last_known_good(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_config_status.rb#13
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/node_daemon_endpoints.rb#2
class KubeDSL::DSL::V1::NodeDaemonEndpoints < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_daemon_endpoints.rb#13
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def kubelet_endpoint(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_daemon_endpoints.rb#7
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/node_list.rb#2
class KubeDSL::DSL::V1::NodeList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/node_selector.rb#2
class KubeDSL::DSL::V1::NodeSelector < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_selector.rb#13
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def node_selector_term(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def node_selector_terms; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_selector.rb#7
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/node_selector_requirement.rb#2
class KubeDSL::DSL::V1::NodeSelectorRequirement < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def key(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_selector_requirement.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def operator(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_selector_requirement.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def values(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/node_selector_term.rb#2
class KubeDSL::DSL::V1::NodeSelectorTerm < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_selector_term.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def match_expression(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def match_expressions; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def match_field(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def match_fields; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_selector_term.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/node_spec.rb#2
class KubeDSL::DSL::V1::NodeSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def config_source(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def external_id(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_spec.rb#31
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def pod_cid_rs(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def pod_cidr(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def provider_id(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_spec.rb#19
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def taint(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def taints; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def unschedulable(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/node_status.rb#2
class KubeDSL::DSL::V1::NodeStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def address(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def addresses; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#46
  def allocatable(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#46
  def capacity(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def condition(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def conditions; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def config(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def daemon_endpoints(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def image(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def images; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_status.rb#43
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def node_info(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def phase(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_status.rb#27
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def volumes_attached(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def volumes_attacheds; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def volumes_in_use(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/node_system_info.rb#2
class KubeDSL::DSL::V1::NodeSystemInfo < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def architecture(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def boot_id(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def container_runtime_version(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def kernel_version(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_system_info.rb#40
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def kube_proxy_version(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def kubelet_version(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def machine_id(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def operating_system(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def os_image(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/node_system_info.rb#25
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def system_uuid(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/object_field_selector.rb#2
class KubeDSL::DSL::V1::ObjectFieldSelector < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def api_version(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def field_path(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/object_field_selector.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/object_field_selector.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/object_reference.rb#2
class KubeDSL::DSL::V1::ObjectReference < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def api_version(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def field_path(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def kind(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/object_reference.rb#31
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def namespace(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def resource_version(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/object_reference.rb#19
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def uid(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume.rb#2
class KubeDSL::DSL::V1::PersistentVolume < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def status(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_claim.rb#2
class KubeDSL::DSL::V1::PersistentVolumeClaim < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_claim.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_claim.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def status(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_claim_condition.rb#2
class KubeDSL::DSL::V1::PersistentVolumeClaimCondition < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_claim_condition.rb#28
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def last_probe_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def last_transition_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_claim_condition.rb#17
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def status(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_claim_list.rb#2
class KubeDSL::DSL::V1::PersistentVolumeClaimList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_claim_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_claim_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_claim_spec.rb#2
class KubeDSL::DSL::V1::PersistentVolumeClaimSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def access_modes(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def data_source(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_claim_spec.rb#31
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def resources(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_claim_spec.rb#19
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def storage_class_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def volume_mode(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def volume_name(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_claim_status.rb#2
class KubeDSL::DSL::V1::PersistentVolumeClaimStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def access_modes(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#46
  def capacity(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def condition(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def conditions; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_claim_status.rb#22
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def phase(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_claim_status.rb#13
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_claim_volume_source.rb#2
class KubeDSL::DSL::V1::PersistentVolumeClaimVolumeSource < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def claim_name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_claim_volume_source.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def read_only(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_claim_volume_source.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_list.rb#2
class KubeDSL::DSL::V1::PersistentVolumeList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_spec.rb#2
class KubeDSL::DSL::V1::PersistentVolumeSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def access_modes(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def aws_elastic_block_store(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def azure_disk(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def azure_file(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#46
  def capacity(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def cephfs(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def cinder(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def claim_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def csi(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def fc(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def flex_volume(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def flocker(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def gce_persistent_disk(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def glusterfs(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def host_path(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def iscsi(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_spec.rb#100
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def local(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def mount_options(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def nfs(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def node_affinity(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def persistent_volume_reclaim_policy(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def photon_persistent_disk(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def portworx_volume(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def quobyte(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def rbd(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def scale_io(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_spec.rb#65
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def storage_class_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def storageos(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def volume_mode(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def vsphere_volume(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_status.rb#2
class KubeDSL::DSL::V1::PersistentVolumeStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_status.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def phase(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/persistent_volume_status.rb#11
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/photon_persistent_disk_volume_source.rb#2
class KubeDSL::DSL::V1::PhotonPersistentDiskVolumeSource < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def fs_type(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/photon_persistent_disk_volume_source.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def pd_id(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/photon_persistent_disk_volume_source.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/pod.rb#2
class KubeDSL::DSL::V1::Pod < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def status(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/pod_affinity.rb#2
class KubeDSL::DSL::V1::PodAffinity < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_affinity.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def preferred_during_scheduling_ignored_during_execution(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def preferred_during_scheduling_ignored_during_executions; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def required_during_scheduling_ignored_during_execution(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def required_during_scheduling_ignored_during_executions; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_affinity.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/pod_affinity_term.rb#2
class KubeDSL::DSL::V1::PodAffinityTerm < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_affinity_term.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def label_selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def namespaces(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_affinity_term.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def topology_key(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/pod_anti_affinity.rb#2
class KubeDSL::DSL::V1::PodAntiAffinity < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_anti_affinity.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def preferred_during_scheduling_ignored_during_execution(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def preferred_during_scheduling_ignored_during_executions; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def required_during_scheduling_ignored_during_execution(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def required_during_scheduling_ignored_during_executions; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_anti_affinity.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/pod_condition.rb#2
class KubeDSL::DSL::V1::PodCondition < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_condition.rb#28
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def last_probe_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def last_transition_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_condition.rb#17
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def status(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/pod_dns_config.rb#2
class KubeDSL::DSL::V1::PodDNSConfig < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_dns_config.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def nameservers(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def option(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def options; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def searches(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_dns_config.rb#11
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/pod_dns_config_option.rb#2
class KubeDSL::DSL::V1::PodDNSConfigOption < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_dns_config_option.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_dns_config_option.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def value(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/pod_ip.rb#2
class KubeDSL::DSL::V1::PodIP < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def ip(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_ip.rb#13
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_ip.rb#7
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/pod_list.rb#2
class KubeDSL::DSL::V1::PodList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/pod_readiness_gate.rb#2
class KubeDSL::DSL::V1::PodReadinessGate < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def condition_type(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_readiness_gate.rb#13
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_readiness_gate.rb#7
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/pod_security_context.rb#2
class KubeDSL::DSL::V1::PodSecurityContext < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def fs_group(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_security_context.rb#34
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def run_as_group(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def run_as_non_root(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def run_as_user(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def se_linux_options(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_security_context.rb#21
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def supplemental_groups(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def sysctls(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def sysctlses; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def windows_options(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/pod_spec.rb#2
class KubeDSL::DSL::V1::PodSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def active_deadline_seconds(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def affinity(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def automount_service_account_token(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def container(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def containers; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def dns_config(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def dns_policy(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def enable_service_links(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def ephemeral_container(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def ephemeral_containers; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def host_alias(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def host_aliases; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def host_ipc(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def host_network(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def host_pid(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def hostname(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def image_pull_secret(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def image_pull_secrets; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def init_container(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def init_containers; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_spec.rb#112
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def node_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#46
  def node_selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#46
  def overhead(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def preemption_policy(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def priority(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def priority_class_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def readiness_gate(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def readiness_gates; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def restart_policy(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def runtime_class_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def scheduler_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def security_context(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_spec.rb#73
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def service_account(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def service_account_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def share_process_namespace(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def subdomain(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def termination_grace_period_seconds(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def toleration(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def tolerations; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def topology_spread_constraint(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def topology_spread_constraints; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def volume(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def volumes; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/pod_status.rb#2
class KubeDSL::DSL::V1::PodStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def condition(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def conditions; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def container_status(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def container_statuses; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def ephemeral_container_status(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def ephemeral_container_statuses; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def host_ip(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def init_container_status(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def init_container_statuses; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_status.rb#49
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def nominated_node_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def phase(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def pod_ip(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def pod_ips; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def qos_class(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_status.rb#31
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def start_time(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/pod_template.rb#2
class KubeDSL::DSL::V1::PodTemplate < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_template.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_template.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def template(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/pod_template_list.rb#2
class KubeDSL::DSL::V1::PodTemplateList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_template_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_template_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/pod_template_spec.rb#2
class KubeDSL::DSL::V1::PodTemplateSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_template_spec.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/pod_template_spec.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/portworx_volume_source.rb#2
class KubeDSL::DSL::V1::PortworxVolumeSource < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def fs_type(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/portworx_volume_source.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def read_only(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/portworx_volume_source.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def volume_id(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/preferred_scheduling_term.rb#2
class KubeDSL::DSL::V1::PreferredSchedulingTerm < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/preferred_scheduling_term.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def preference(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/preferred_scheduling_term.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def weight(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/probe.rb#2
class KubeDSL::DSL::V1::Probe < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def exec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def failure_threshold(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def http_get(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def initial_delay_seconds(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/probe.rb#34
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def period_seconds(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/probe.rb#21
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def success_threshold(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def tcp_socket(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def timeout_seconds(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/projected_volume_source.rb#2
class KubeDSL::DSL::V1::ProjectedVolumeSource < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def default_mode(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/projected_volume_source.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/projected_volume_source.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def source(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def sources; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/quobyte_volume_source.rb#2
class KubeDSL::DSL::V1::QuobyteVolumeSource < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def group(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/quobyte_volume_source.rb#28
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def read_only(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def registry(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/quobyte_volume_source.rb#17
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def tenant(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def user(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def volume(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/rbd_persistent_volume_source.rb#2
class KubeDSL::DSL::V1::RBDPersistentVolumeSource < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def fs_type(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def image(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def keyring(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/rbd_persistent_volume_source.rb#34
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def monitors(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def pool(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def read_only(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def secret_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/rbd_persistent_volume_source.rb#21
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def user(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/rbd_volume_source.rb#2
class KubeDSL::DSL::V1::RBDVolumeSource < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def fs_type(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def image(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def keyring(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/rbd_volume_source.rb#34
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def monitors(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def pool(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def read_only(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def secret_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/rbd_volume_source.rb#21
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def user(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/replication_controller.rb#2
class KubeDSL::DSL::V1::ReplicationController < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/replication_controller.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/replication_controller.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def status(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/replication_controller_condition.rb#2
class KubeDSL::DSL::V1::ReplicationControllerCondition < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/replication_controller_condition.rb#25
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def last_transition_time(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def message(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def reason(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/replication_controller_condition.rb#15
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def status(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/replication_controller_list.rb#2
class KubeDSL::DSL::V1::ReplicationControllerList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/replication_controller_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/replication_controller_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/replication_controller_spec.rb#2
class KubeDSL::DSL::V1::ReplicationControllerSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/replication_controller_spec.rb#22
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def min_ready_seconds(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#46
  def selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/replication_controller_spec.rb#13
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def template(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/replication_controller_status.rb#2
class KubeDSL::DSL::V1::ReplicationControllerStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def available_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def condition(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def conditions; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def fully_labeled_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/replication_controller_status.rb#28
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def observed_generation(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def ready_replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def replicas(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/replication_controller_status.rb#17
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/resource_field_selector.rb#2
class KubeDSL::DSL::V1::ResourceFieldSelector < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def container_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def divisor(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/resource_field_selector.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def resource(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/resource_field_selector.rb#11
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/resource_quota.rb#2
class KubeDSL::DSL::V1::ResourceQuota < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/resource_quota.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/resource_quota.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def status(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/resource_quota_list.rb#2
class KubeDSL::DSL::V1::ResourceQuotaList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/resource_quota_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/resource_quota_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/resource_quota_spec.rb#2
class KubeDSL::DSL::V1::ResourceQuotaSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#46
  def hard(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/resource_quota_spec.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def scope_selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def scopes(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/resource_quota_spec.rb#11
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/resource_quota_status.rb#2
class KubeDSL::DSL::V1::ResourceQuotaStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#46
  def hard(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/resource_quota_status.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/resource_quota_status.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#46
  def used(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/resource_requirements.rb#2
class KubeDSL::DSL::V1::ResourceRequirements < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/resource_requirements.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#46
  def limits(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#46
  def requests(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/resource_requirements.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/se_linux_options.rb#2
class KubeDSL::DSL::V1::SELinuxOptions < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/se_linux_options.rb#22
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def level(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def role(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/se_linux_options.rb#13
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def type(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def user(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/scale_io_persistent_volume_source.rb#2
class KubeDSL::DSL::V1::ScaleIOPersistentVolumeSource < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def fs_type(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def gateway(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/scale_io_persistent_volume_source.rb#40
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def protection_domain(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def read_only(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def secret_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/scale_io_persistent_volume_source.rb#25
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def ssl_enabled(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def storage_mode(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def storage_pool(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def system(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def volume_name(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/scale_io_volume_source.rb#2
class KubeDSL::DSL::V1::ScaleIOVolumeSource < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def fs_type(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def gateway(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/scale_io_volume_source.rb#40
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def protection_domain(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def read_only(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def secret_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/scale_io_volume_source.rb#25
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def ssl_enabled(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def storage_mode(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def storage_pool(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def system(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def volume_name(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/scope_selector.rb#2
class KubeDSL::DSL::V1::ScopeSelector < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/scope_selector.rb#13
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def match_expression(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def match_expressions; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/scope_selector.rb#7
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/scoped_resource_selector_requirement.rb#2
class KubeDSL::DSL::V1::ScopedResourceSelectorRequirement < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/scoped_resource_selector_requirement.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def operator(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def scope_name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/scoped_resource_selector_requirement.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def values(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/secret.rb#2
class KubeDSL::DSL::V1::Secret < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#46
  def data(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/secret.rb#24
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/secret.rb#13
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#46
  def string_data(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/secret_env_source.rb#2
class KubeDSL::DSL::V1::SecretEnvSource < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/secret_env_source.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def optional(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/secret_env_source.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/secret_key_selector.rb#2
class KubeDSL::DSL::V1::SecretKeySelector < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def key(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/secret_key_selector.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def optional(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/secret_key_selector.rb#11
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/secret_list.rb#2
class KubeDSL::DSL::V1::SecretList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/secret_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/secret_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/secret_projection.rb#2
class KubeDSL::DSL::V1::SecretProjection < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/secret_projection.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def optional(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/secret_projection.rb#11
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/secret_reference.rb#2
class KubeDSL::DSL::V1::SecretReference < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/secret_reference.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def namespace(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/secret_reference.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/secret_volume_source.rb#2
class KubeDSL::DSL::V1::SecretVolumeSource < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def default_mode(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/secret_volume_source.rb#22
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def optional(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def secret_name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/secret_volume_source.rb#13
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/security_context.rb#2
class KubeDSL::DSL::V1::SecurityContext < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def allow_privilege_escalation(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def capabilities(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/security_context.rb#40
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def privileged(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def proc_mount(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def read_only_root_filesystem(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def run_as_group(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def run_as_non_root(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def run_as_user(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def se_linux_options(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/security_context.rb#25
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def windows_options(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/service.rb#2
class KubeDSL::DSL::V1::Service < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/service.rb#21
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/service.rb#11
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def spec(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def status(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/service_account.rb#2
class KubeDSL::DSL::V1::ServiceAccount < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def automount_service_account_token(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def image_pull_secret(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def image_pull_secrets; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/service_account.rb#24
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def secret(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def secrets; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/service_account.rb#13
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/service_account_list.rb#2
class KubeDSL::DSL::V1::ServiceAccountList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/service_account_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/service_account_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/service_account_token_projection.rb#2
class KubeDSL::DSL::V1::ServiceAccountTokenProjection < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def audience(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def expiration_seconds(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/service_account_token_projection.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def path(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/service_account_token_projection.rb#11
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/service_list.rb#2
class KubeDSL::DSL::V1::ServiceList < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def item(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def items; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/service_list.rb#18
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def metadata(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/service_list.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/service_port.rb#2
class KubeDSL::DSL::V1::ServicePort < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/service_port.rb#25
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def node_port(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def port(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def protocol(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/service_port.rb#15
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def target_port(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/service_spec.rb#2
class KubeDSL::DSL::V1::ServiceSpec < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def cluster_ip(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def external_i_ps(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def external_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def external_traffic_policy(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def health_check_node_port(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def ip_family(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/service_spec.rb#55
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def load_balancer_ip(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def load_balancer_source_ranges(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def port(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def ports; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def publish_not_ready_addresses(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#46
  def selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/service_spec.rb#35
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def session_affinity(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def session_affinity_config(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def topology_keys(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def type(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/service_status.rb#2
class KubeDSL::DSL::V1::ServiceStatus < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/service_status.rb#13
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def load_balancer(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/service_status.rb#7
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/session_affinity_config.rb#2
class KubeDSL::DSL::V1::SessionAffinityConfig < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def client_ip(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/session_affinity_config.rb#13
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/session_affinity_config.rb#7
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/storage_os_persistent_volume_source.rb#2
class KubeDSL::DSL::V1::StorageOSPersistentVolumeSource < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def fs_type(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/storage_os_persistent_volume_source.rb#25
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def read_only(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def secret_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/storage_os_persistent_volume_source.rb#15
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def volume_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def volume_namespace(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/storage_os_volume_source.rb#2
class KubeDSL::DSL::V1::StorageOSVolumeSource < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def fs_type(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/storage_os_volume_source.rb#25
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def read_only(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def secret_ref(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/storage_os_volume_source.rb#15
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def volume_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def volume_namespace(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/sysctl.rb#2
class KubeDSL::DSL::V1::Sysctl < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/sysctl.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/sysctl.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def value(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/tcp_socket_action.rb#2
class KubeDSL::DSL::V1::TCPSocketAction < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def host(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/tcp_socket_action.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def port(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/tcp_socket_action.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/taint.rb#2
class KubeDSL::DSL::V1::Taint < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def effect(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def key(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/taint.rb#22
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/taint.rb#13
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def time_added(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def value(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/toleration.rb#2
class KubeDSL::DSL::V1::Toleration < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def effect(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def key(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/toleration.rb#25
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def operator(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/toleration.rb#15
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def toleration_seconds(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def value(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/topology_selector_label_requirement.rb#2
class KubeDSL::DSL::V1::TopologySelectorLabelRequirement < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def key(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/topology_selector_label_requirement.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/topology_selector_label_requirement.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def values(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/topology_selector_term.rb#2
class KubeDSL::DSL::V1::TopologySelectorTerm < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/topology_selector_term.rb#13
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#65
  def match_label_expression(elem_name = T.unsafe(nil), &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#91
  def match_label_expressions; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/topology_selector_term.rb#7
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/topology_spread_constraint.rb#2
class KubeDSL::DSL::V1::TopologySpreadConstraint < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/topology_spread_constraint.rb#22
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def label_selector(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def max_skew(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/topology_spread_constraint.rb#13
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def topology_key(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def when_unsatisfiable(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/typed_local_object_reference.rb#2
class KubeDSL::DSL::V1::TypedLocalObjectReference < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def api_group(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def kind(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/typed_local_object_reference.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/typed_local_object_reference.rb#11
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/volume.rb#2
class KubeDSL::DSL::V1::Volume < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def aws_elastic_block_store(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def azure_disk(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def azure_file(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def cephfs(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def cinder(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def config_map(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def csi(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def downward_api(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def empty_dir(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def fc(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def flex_volume(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def flocker(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def gce_persistent_disk(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def git_repo(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def glusterfs(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def host_path(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def iscsi(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/volume.rb#97
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def nfs(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def persistent_volume_claim(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def photon_persistent_disk(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def portworx_volume(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def projected(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def quobyte(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def rbd(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def scale_io(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def secret(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/volume.rb#63
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def storageos(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def vsphere_volume(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/volume_device.rb#2
class KubeDSL::DSL::V1::VolumeDevice < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def device_path(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/volume_device.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/volume_device.rb#9
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/volume_mount.rb#2
class KubeDSL::DSL::V1::VolumeMount < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/volume_mount.rb#28
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def mount_path(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def mount_propagation(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def read_only(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/volume_mount.rb#17
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def sub_path(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def sub_path_expr(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/volume_node_affinity.rb#2
class KubeDSL::DSL::V1::VolumeNodeAffinity < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/volume_node_affinity.rb#13
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def required(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/volume_node_affinity.rb#7
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/volume_projection.rb#2
class KubeDSL::DSL::V1::VolumeProjection < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def config_map(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def downward_api(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/volume_projection.rb#22
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def secret(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/volume_projection.rb#13
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def service_account_token(*args, &block); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/vsphere_virtual_disk_volume_source.rb#2
class KubeDSL::DSL::V1::VsphereVirtualDiskVolumeSource < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def fs_type(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/vsphere_virtual_disk_volume_source.rb#22
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/vsphere_virtual_disk_volume_source.rb#13
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def storage_policy_id(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def storage_policy_name(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def volume_path(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/weighted_pod_affinity_term.rb#2
class KubeDSL::DSL::V1::WeightedPodAffinityTerm < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/dsl/v1/weighted_pod_affinity_term.rb#16
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#29
  def pod_affinity_term(*args, &block); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/weighted_pod_affinity_term.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def weight(*args); end
end

# source://kube-dsl//lib/kube-dsl/dsl/v1/windows_security_context_options.rb#2
class KubeDSL::DSL::V1::WindowsSecurityContextOptions < ::KubeDSL::DSLObject
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def gmsa_credential_spec(*args); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def gmsa_credential_spec_name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/windows_security_context_options.rb#19
  def kind_sym; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#15
  def run_as_user_name(*args); end

  # source://kube-dsl//lib/kube-dsl/dsl/v1/windows_security_context_options.rb#11
  def serialize; end
end

# source://kube-dsl//lib/kube-dsl/dsl_object.rb#2
class KubeDSL::DSLObject
  include ::KubeDSL::ValueFields::InstanceMethods
  include ::KubeDSL::Validations::InstanceMethods
  extend ::KubeDSL::ValueFields
  extend ::KubeDSL::ValueFields::ClassMethods
  extend ::KubeDSL::Validations
  extend ::KubeDSL::Validations::ClassMethods

  # @return [DSLObject] a new instance of DSLObject
  #
  # source://kube-dsl//lib/kube-dsl/dsl_object.rb#6
  def initialize(&block); end

  # source://kube-dsl//lib/kube-dsl/dsl_object.rb#10
  def to_resource; end
end

# source://kube-dsl//lib/kube-dsl/default_field_res.rb#4
class KubeDSL::DefaultFieldRes
  include ::KubeDSL::StringHelpers

  # @return [DefaultFieldRes] a new instance of DefaultFieldRes
  #
  # source://kube-dsl//lib/kube-dsl/default_field_res.rb#9
  def initialize(name, res, allowed_values); end

  # Returns the value of attribute allowed_values.
  #
  # source://kube-dsl//lib/kube-dsl/default_field_res.rb#7
  def allowed_values; end

  # source://kube-dsl//lib/kube-dsl/default_field_res.rb#15
  def fields_to_ruby(_inflector); end

  # Returns the value of attribute name.
  #
  # source://kube-dsl//lib/kube-dsl/default_field_res.rb#7
  def name; end

  # Returns the value of attribute res.
  #
  # source://kube-dsl//lib/kube-dsl/default_field_res.rb#7
  def res; end

  # source://kube-dsl//lib/kube-dsl/default_field_res.rb#23
  def serialize_call(_inflector); end

  # source://kube-dsl//lib/kube-dsl/default_field_res.rb#19
  def validations(_inflector); end
end

# source://kube-dsl//lib/kube-dsl/entrypoint.rb#1
module KubeDSL::Entrypoint
  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#302
  def affinity(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1066
  def aggregation_rule(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1242
  def api_group(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1246
  def api_group_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1250
  def api_resource(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1254
  def api_resource_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1322
  def api_service(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1326
  def api_service_condition(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1330
  def api_service_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1334
  def api_service_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1338
  def api_service_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1258
  def api_versions(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#306
  def attached_volume(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#298
  def aws_elastic_block_store_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#310
  def azure_disk_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#314
  def azure_file_persistent_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#318
  def azure_file_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#322
  def binding(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#150
  def bound_object_reference(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#334
  def capabilities(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#338
  def ceph_fs_persistent_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#342
  def ceph_fs_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#346
  def cinder_persistent_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#350
  def cinder_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#354
  def client_ip_config(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1070
  def cluster_role(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1074
  def cluster_role_binding(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1078
  def cluster_role_binding_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1082
  def cluster_role_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#358
  def component_condition(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#362
  def component_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#366
  def component_status_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#370
  def config_map(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#374
  def config_map_env_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#378
  def config_map_key_selector(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#382
  def config_map_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#386
  def config_map_node_config_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#390
  def config_map_projection(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#394
  def config_map_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#398
  def container(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#402
  def container_image(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#406
  def container_port(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#410
  def container_state(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#414
  def container_state_running(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#418
  def container_state_terminated(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#422
  def container_state_waiting(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#426
  def container_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#38
  def controller_revision(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#42
  def controller_revision_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#234
  def cross_version_object_reference(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1122
  def csi_node(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1126
  def csi_node_driver(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1130
  def csi_node_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1134
  def csi_node_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#326
  def csi_persistent_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#330
  def csi_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1174
  def custom_resource_column_definition(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1178
  def custom_resource_conversion(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1182
  def custom_resource_definition(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1186
  def custom_resource_definition_condition(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1190
  def custom_resource_definition_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1194
  def custom_resource_definition_names(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1198
  def custom_resource_definition_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1202
  def custom_resource_definition_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1206
  def custom_resource_definition_version(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1210
  def custom_resource_subresource_scale(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1214
  def custom_resource_subresources(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1218
  def custom_resource_validation(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#430
  def daemon_endpoint(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#46
  def daemon_set(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#50
  def daemon_set_condition(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#54
  def daemon_set_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#58
  def daemon_set_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#62
  def daemon_set_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#66
  def daemon_set_update_strategy(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1262
  def delete_options(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#70
  def deployment(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#74
  def deployment_condition(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#78
  def deployment_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#82
  def deployment_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#86
  def deployment_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#90
  def deployment_strategy(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#434
  def downward_api_projection(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#438
  def downward_api_volume_file(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#442
  def downward_api_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#446
  def empty_dir_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#450
  def endpoint_address(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#454
  def endpoint_port(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#458
  def endpoint_subset(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#462
  def endpoints(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#466
  def endpoints_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#470
  def env_from_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#474
  def env_var(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#478
  def env_var_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#482
  def ephemeral_container(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#486
  def event(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#490
  def event_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#494
  def event_series(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#498
  def event_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#502
  def exec_action(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1222
  def external_documentation(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#506
  def fc_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#510
  def flex_persistent_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#514
  def flex_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#518
  def flocker_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#522
  def gce_persistent_disk_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#526
  def git_repo_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#530
  def glusterfs_persistent_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#534
  def glusterfs_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1266
  def group_version_for_discovery(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#546
  def handler(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#238
  def horizontal_pod_autoscaler(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#242
  def horizontal_pod_autoscaler_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#246
  def horizontal_pod_autoscaler_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#250
  def horizontal_pod_autoscaler_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#550
  def host_alias(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#554
  def host_path_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#538
  def http_get_action(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#542
  def http_header(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1318
  def info(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1034
  def ip_block(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#558
  def iscsi_persistent_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#562
  def iscsi_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#266
  def job(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#270
  def job_condition(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#274
  def job_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#278
  def job_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#282
  def job_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1226
  def json_schema_props(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#566
  def key_to_path(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1270
  def label_selector(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1274
  def label_selector_requirement(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#286
  def lease(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#290
  def lease_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#294
  def lease_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#570
  def lifecycle(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#574
  def limit_range(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#578
  def limit_range_item(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#582
  def limit_range_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#586
  def limit_range_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1278
  def list_meta(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#590
  def load_balancer_ingress(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#594
  def load_balancer_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#598
  def local_object_reference(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#182
  def local_subject_access_review(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#602
  def local_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1282
  def managed_fields_entry(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#2
  def mutating_webhook(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#6
  def mutating_webhook_configuration(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#10
  def mutating_webhook_configuration_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#610
  def namespace(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#614
  def namespace_condition(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#618
  def namespace_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#622
  def namespace_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#626
  def namespace_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1038
  def network_policy(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1042
  def network_policy_egress_rule(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1046
  def network_policy_ingress_rule(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1050
  def network_policy_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1054
  def network_policy_peer(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1058
  def network_policy_port(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1062
  def network_policy_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#606
  def nfs_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#630
  def node(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#634
  def node_address(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#638
  def node_affinity(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#642
  def node_condition(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#646
  def node_config_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#650
  def node_config_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#654
  def node_daemon_endpoints(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#658
  def node_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#662
  def node_selector(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#666
  def node_selector_requirement(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#670
  def node_selector_term(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#674
  def node_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#678
  def node_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#682
  def node_system_info(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#186
  def non_resource_attributes(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#190
  def non_resource_rule(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#686
  def object_field_selector(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1286
  def object_meta(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#690
  def object_reference(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1290
  def owner_reference(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#694
  def persistent_volume(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#698
  def persistent_volume_claim(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#702
  def persistent_volume_claim_condition(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#706
  def persistent_volume_claim_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#710
  def persistent_volume_claim_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#714
  def persistent_volume_claim_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#718
  def persistent_volume_claim_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#722
  def persistent_volume_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#726
  def persistent_volume_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#730
  def persistent_volume_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#734
  def photon_persistent_disk_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#738
  def pod(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#742
  def pod_affinity(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#746
  def pod_affinity_term(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#750
  def pod_anti_affinity(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#754
  def pod_condition(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#758
  def pod_dns_config(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#762
  def pod_dns_config_option(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#766
  def pod_ip(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#770
  def pod_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#774
  def pod_readiness_gate(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#778
  def pod_security_context(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#782
  def pod_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#786
  def pod_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#790
  def pod_template(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#794
  def pod_template_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#798
  def pod_template_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1086
  def policy_rule(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#802
  def portworx_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1294
  def preconditions(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#806
  def preferred_scheduling_term(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1114
  def priority_class(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1118
  def priority_class_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#810
  def probe(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#814
  def projected_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#818
  def quobyte_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#822
  def rbd_persistent_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#826
  def rbd_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#94
  def replica_set(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#98
  def replica_set_condition(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#102
  def replica_set_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#106
  def replica_set_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#110
  def replica_set_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#830
  def replication_controller(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#834
  def replication_controller_condition(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#838
  def replication_controller_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#842
  def replication_controller_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#846
  def replication_controller_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#194
  def resource_attributes(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#850
  def resource_field_selector(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#854
  def resource_quota(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#858
  def resource_quota_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#862
  def resource_quota_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#866
  def resource_quota_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#870
  def resource_requirements(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#198
  def resource_rule(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1090
  def role(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1094
  def role_binding(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1098
  def role_binding_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1102
  def role_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1106
  def role_ref(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#114
  def rolling_update_daemon_set(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#118
  def rolling_update_deployment(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#122
  def rolling_update_stateful_set_strategy(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#14
  def rule_with_operations(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#254
  def scale(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#878
  def scale_io_persistent_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#882
  def scale_io_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#258
  def scale_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#262
  def scale_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#886
  def scope_selector(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#890
  def scoped_resource_selector_requirement(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#874
  def se_linux_options(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#894
  def secret(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#898
  def secret_env_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#902
  def secret_key_selector(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#906
  def secret_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#910
  def secret_projection(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#914
  def secret_reference(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#918
  def secret_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#922
  def security_context(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#202
  def self_subject_access_review(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#206
  def self_subject_access_review_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#210
  def self_subject_rules_review(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#214
  def self_subject_rules_review_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1298
  def server_address_by_client_cidr(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#926
  def service(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#930
  def service_account(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#934
  def service_account_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#938
  def service_account_token_projection(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#942
  def service_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#946
  def service_port(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1342
  def service_reference(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#950
  def service_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#954
  def service_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#958
  def session_affinity_config(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#126
  def stateful_set(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#130
  def stateful_set_condition(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#134
  def stateful_set_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#138
  def stateful_set_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#142
  def stateful_set_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#146
  def stateful_set_update_strategy(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1302
  def status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1306
  def status_cause(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1310
  def status_details(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1138
  def storage_class(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1142
  def storage_class_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#962
  def storage_os_persistent_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#966
  def storage_os_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1110
  def subject(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#218
  def subject_access_review(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#222
  def subject_access_review_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#226
  def subject_access_review_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#230
  def subject_rules_review_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#970
  def sysctl(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#978
  def taint(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#974
  def tcp_socket_action(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#154
  def token_request(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#158
  def token_request_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#162
  def token_request_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#166
  def token_review(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#170
  def token_review_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#174
  def token_review_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#982
  def toleration(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#986
  def topology_selector_label_requirement(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#990
  def topology_selector_term(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#994
  def topology_spread_constraint(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#998
  def typed_local_object_reference(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#178
  def user_info(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#22
  def validating_webhook(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#26
  def validating_webhook_configuration(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#30
  def validating_webhook_configuration_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1002
  def volume(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1146
  def volume_attachment(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1150
  def volume_attachment_list(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1154
  def volume_attachment_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1158
  def volume_attachment_spec(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1162
  def volume_attachment_status(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1006
  def volume_device(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1166
  def volume_error(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1010
  def volume_mount(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1014
  def volume_node_affinity(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1170
  def volume_node_resources(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1018
  def volume_projection(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1022
  def vsphere_virtual_disk_volume_source(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1314
  def watch_event(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1234
  def webhook_client_config(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1238
  def webhook_conversion(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1026
  def weighted_pod_affinity_term(&block); end

  # source://kube-dsl//lib/kube-dsl/entrypoint.rb#1030
  def windows_security_context_options(&block); end
end

# source://kube-dsl//lib/kube-dsl/external_ref.rb#2
class KubeDSL::ExternalRef < ::KubeDSL::Ref
  # source://kube-dsl//lib/kube-dsl/external_ref.rb#7
  def document; end

  # source://kube-dsl//lib/kube-dsl/external_ref.rb#3
  def meta; end

  # assume external refs are always object fields
  #
  # @return [Boolean]
  #
  # source://kube-dsl//lib/kube-dsl/external_ref.rb#12
  def object?; end
end

# source://kube-dsl//lib/kube-dsl/external_resource_meta.rb#2
class KubeDSL::ExternalResourceMeta
  # @return [ExternalResourceMeta] a new instance of ExternalResourceMeta
  #
  # source://kube-dsl//lib/kube-dsl/external_resource_meta.rb#5
  def initialize(ref); end

  # @return [Boolean]
  #
  # source://kube-dsl//lib/kube-dsl/external_resource_meta.rb#9
  def external?; end

  # Returns the value of attribute ref.
  #
  # source://kube-dsl//lib/kube-dsl/external_resource_meta.rb#3
  def ref; end
end

# source://kube-dsl//lib/kube-dsl/field_res.rb#2
class KubeDSL::FieldRes
  include ::KubeDSL::StringHelpers

  # @return [FieldRes] a new instance of FieldRes
  #
  # source://kube-dsl//lib/kube-dsl/field_res.rb#9
  def initialize(name, type, required); end

  # source://kube-dsl//lib/kube-dsl/field_res.rb#15
  def fields_to_ruby(_inflector); end

  # Returns the value of attribute name.
  #
  # source://kube-dsl//lib/kube-dsl/field_res.rb#5
  def name; end

  # Returns the value of attribute required.
  #
  # source://kube-dsl//lib/kube-dsl/field_res.rb#5
  def required; end

  # Returns the value of attribute required.
  #
  # source://kube-dsl//lib/kube-dsl/field_res.rb#5
  def required?; end

  # source://kube-dsl//lib/kube-dsl/field_res.rb#25
  def serialize_call(_inflector); end

  # Returns the value of attribute type.
  #
  # source://kube-dsl//lib/kube-dsl/field_res.rb#5
  def type; end

  # source://kube-dsl//lib/kube-dsl/field_res.rb#19
  def validations(_inflector); end

  private

  # source://kube-dsl//lib/kube-dsl/field_res.rb#31
  def ruby_safe_name; end
end

# source://kube-dsl//lib/kube-dsl/generator.rb#2
class KubeDSL::Generator
  # @return [Generator] a new instance of Generator
  #
  # source://kube-dsl//lib/kube-dsl/generator.rb#5
  def initialize(*args, **kwargs); end

  # Returns the value of attribute builder.
  #
  # source://kube-dsl//lib/kube-dsl/generator.rb#3
  def builder; end

  # source://kube-dsl//lib/kube-dsl/generator.rb#9
  def generate; end

  # source://kube-dsl//lib/kube-dsl/generator.rb#28
  def generate_autoload_files; end

  # source://kube-dsl//lib/kube-dsl/generator.rb#39
  def generate_entrypoint_file(&block); end

  # source://kube-dsl//lib/kube-dsl/generator.rb#15
  def generate_resource_files; end
end

# source://kube-dsl//lib/kube-dsl/inflector.rb#5
class KubeDSL::Inflector
  include ::Singleton
  extend ::Singleton::SingletonClassMethods

  # source://kube-dsl//lib/kube-dsl/inflector.rb#18
  def inflector; end

  class << self
    # source://kube-dsl//lib/kube-dsl/inflector.rb#9
    def pluralize(*args); end

    # source://kube-dsl//lib/kube-dsl/inflector.rb#13
    def singularize(*args); end
  end
end

# source://kube-dsl//lib/kube-dsl.rb#2
KubeDSL::KUBERNETES_VERSION = T.let(T.unsafe(nil), String)

# source://kube-dsl//lib/kube-dsl/key_value_field_res.rb#2
class KubeDSL::KeyValueFieldRes
  include ::KubeDSL::StringHelpers

  # @return [KeyValueFieldRes] a new instance of KeyValueFieldRes
  #
  # source://kube-dsl//lib/kube-dsl/key_value_field_res.rb#9
  def initialize(name, res, type, required); end

  # source://kube-dsl//lib/kube-dsl/key_value_field_res.rb#16
  def fields_to_ruby(_inflector); end

  # Returns the value of attribute name.
  #
  # source://kube-dsl//lib/kube-dsl/key_value_field_res.rb#5
  def name; end

  # Returns the value of attribute required.
  #
  # source://kube-dsl//lib/kube-dsl/key_value_field_res.rb#5
  def required; end

  # Returns the value of attribute required.
  #
  # source://kube-dsl//lib/kube-dsl/key_value_field_res.rb#5
  def required?; end

  # Returns the value of attribute res.
  #
  # source://kube-dsl//lib/kube-dsl/key_value_field_res.rb#5
  def res; end

  # source://kube-dsl//lib/kube-dsl/key_value_field_res.rb#28
  def serialize_call(_inflector); end

  # Returns the value of attribute type.
  #
  # source://kube-dsl//lib/kube-dsl/key_value_field_res.rb#5
  def type; end

  # source://kube-dsl//lib/kube-dsl/key_value_field_res.rb#22
  def validations(_inflector); end
end

# source://kube-dsl//lib/kube-dsl/key_value_fields.rb#4
class KubeDSL::KeyValueFields
  # @return [KeyValueFields] a new instance of KeyValueFields
  #
  # source://kube-dsl//lib/kube-dsl/key_value_fields.rb#7
  def initialize(format: T.unsafe(nil)); end

  # source://kube-dsl//lib/kube-dsl/key_value_fields.rb#12
  def add(key, value); end

  # Returns the value of attribute format.
  #
  # source://kube-dsl//lib/kube-dsl/key_value_fields.rb#5
  def format; end

  # source://kube-dsl//lib/kube-dsl/key_value_fields.rb#20
  def get(key); end

  # Returns the value of attribute kv_pairs.
  #
  # source://kube-dsl//lib/kube-dsl/key_value_fields.rb#5
  def kv_pairs; end

  # source://kube-dsl//lib/kube-dsl/key_value_fields.rb#34
  def merge!(other); end

  # source://kube-dsl//lib/kube-dsl/key_value_fields.rb#16
  def remove(key); end

  # source://kube-dsl//lib/kube-dsl/key_value_fields.rb#28
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/key_value_fields.rb#24
  def set(key, value); end

  private

  # source://kube-dsl//lib/kube-dsl/key_value_fields.rb#40
  def serialize_value(data); end
end

# source://kube-dsl//lib/kube-dsl/object_field_res.rb#2
class KubeDSL::ObjectFieldRes
  include ::KubeDSL::StringHelpers

  # @return [ObjectFieldRes] a new instance of ObjectFieldRes
  #
  # source://kube-dsl//lib/kube-dsl/object_field_res.rb#7
  def initialize(name, res); end

  # source://kube-dsl//lib/kube-dsl/object_field_res.rb#12
  def fields_to_ruby(_inflector); end

  # Returns the value of attribute name.
  #
  # source://kube-dsl//lib/kube-dsl/object_field_res.rb#5
  def name; end

  # Returns the value of attribute res.
  #
  # source://kube-dsl//lib/kube-dsl/object_field_res.rb#5
  def res; end

  # source://kube-dsl//lib/kube-dsl/object_field_res.rb#25
  def serialize_call(_inflector); end

  # source://kube-dsl//lib/kube-dsl/object_field_res.rb#18
  def validations(_inflector); end

  private

  # source://kube-dsl//lib/kube-dsl/object_field_res.rb#31
  def ruby_safe_name; end
end

# source://kube-dsl//lib/kube-dsl/ref.rb#2
class KubeDSL::Ref
  include ::KubeDSL::StringHelpers

  # @return [Ref] a new instance of Ref
  #
  # source://kube-dsl//lib/kube-dsl/ref.rb#8
  def initialize(str, ruby_namespace_prefix, inflector, schema_dir, autoload_prefix); end

  # Returns the value of attribute autoload_prefix.
  #
  # source://kube-dsl//lib/kube-dsl/ref.rb#6
  def autoload_prefix; end

  # source://kube-dsl//lib/kube-dsl/ref.rb#33
  def document; end

  # Returns the value of attribute inflector.
  #
  # source://kube-dsl//lib/kube-dsl/ref.rb#5
  def inflector; end

  # Returns the value of attribute kind.
  #
  # source://kube-dsl//lib/kube-dsl/ref.rb#5
  def kind; end

  # source://kube-dsl//lib/kube-dsl/ref.rb#29
  def meta; end

  # Returns the value of attribute namespace.
  #
  # source://kube-dsl//lib/kube-dsl/ref.rb#5
  def namespace; end

  # @return [Boolean]
  #
  # source://kube-dsl//lib/kube-dsl/ref.rb#37
  def object?; end

  # source://kube-dsl//lib/kube-dsl/ref.rb#53
  def ruby_autoload_path; end

  # source://kube-dsl//lib/kube-dsl/ref.rb#41
  def ruby_namespace; end

  # Returns the value of attribute ruby_namespace_prefix.
  #
  # source://kube-dsl//lib/kube-dsl/ref.rb#6
  def ruby_namespace_prefix; end

  # Returns the value of attribute schema_dir.
  #
  # source://kube-dsl//lib/kube-dsl/ref.rb#5
  def schema_dir; end

  # Returns the value of attribute str.
  #
  # source://kube-dsl//lib/kube-dsl/ref.rb#5
  def str; end

  # Returns the value of attribute version.
  #
  # source://kube-dsl//lib/kube-dsl/ref.rb#5
  def version; end

  private

  # source://kube-dsl//lib/kube-dsl/ref.rb#65
  def filename; end
end

# source://kube-dsl//lib/kube-dsl/resource.rb#2
class KubeDSL::Resource
  # @return [Resource] a new instance of Resource
  #
  # source://kube-dsl//lib/kube-dsl/resource.rb#5
  def initialize(contents); end

  # Returns the value of attribute contents.
  #
  # source://kube-dsl//lib/kube-dsl/resource.rb#3
  def contents; end

  # source://kube-dsl//lib/kube-dsl/resource.rb#9
  def serialize; end

  # source://kube-dsl//lib/kube-dsl/resource.rb#17
  def to_resource; end

  # source://kube-dsl//lib/kube-dsl/resource.rb#13
  def to_yaml; end

  private

  # source://kube-dsl//lib/kube-dsl/resource.rb#23
  def cleanup(obj); end
end

# source://kube-dsl//lib/kube-dsl/resource_meta.rb#2
class KubeDSL::ResourceMeta
  include ::KubeDSL::StringHelpers

  # @return [ResourceMeta] a new instance of ResourceMeta
  #
  # source://kube-dsl//lib/kube-dsl/resource_meta.rb#7
  def initialize(ref, inflector); end

  # @return [Boolean]
  #
  # source://kube-dsl//lib/kube-dsl/resource_meta.rb#17
  def empty?; end

  # @return [Boolean]
  #
  # source://kube-dsl//lib/kube-dsl/resource_meta.rb#13
  def external?; end

  # Returns the value of attribute fields.
  #
  # source://kube-dsl//lib/kube-dsl/resource_meta.rb#5
  def fields; end

  # Returns the value of attribute inflector.
  #
  # source://kube-dsl//lib/kube-dsl/resource_meta.rb#5
  def inflector; end

  # Returns the value of attribute ref.
  #
  # source://kube-dsl//lib/kube-dsl/resource_meta.rb#5
  def ref; end

  # source://kube-dsl//lib/kube-dsl/resource_meta.rb#21
  def to_ruby; end

  private

  # source://kube-dsl//lib/kube-dsl/resource_meta.rb#47
  def fields_to_ruby; end

  # source://kube-dsl//lib/kube-dsl/resource_meta.rb#41
  def indent(lines, level); end

  # source://kube-dsl//lib/kube-dsl/resource_meta.rb#81
  def quote_sym(sym_str); end

  # source://kube-dsl//lib/kube-dsl/resource_meta.rb#67
  def serialize_method; end

  # source://kube-dsl//lib/kube-dsl/resource_meta.rb#57
  def validations; end
end

# source://kube-dsl//lib/kube-dsl/string_helpers.rb#2
module KubeDSL::StringHelpers
  extend ::KubeDSL::StringHelpers

  # source://kube-dsl//lib/kube-dsl/string_helpers.rb#9
  def capitalize(str); end

  # source://kube-dsl//lib/kube-dsl/string_helpers.rb#13
  def underscore(str); end

  # source://kube-dsl//lib/kube-dsl/string_helpers.rb#21
  def unkeywordify(str); end
end

# source://kube-dsl//lib/kube-dsl/string_helpers.rb#3
KubeDSL::StringHelpers::RUBY_KEYWORDS = T.let(T.unsafe(nil), Array)

# source://kube-dsl//lib/kube-dsl/validations.rb#2
class KubeDSL::ValidationError < ::StandardError; end

# source://kube-dsl//lib/kube-dsl/validations.rb#4
module KubeDSL::Validations
  class << self
    # @private
    #
    # source://kube-dsl//lib/kube-dsl/validations.rb#223
    def extended(base); end
  end
end

# source://kube-dsl//lib/kube-dsl/validations.rb#47
class KubeDSL::Validations::ArrayValidator
  # @return [ArrayValidator] a new instance of ArrayValidator
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#50
  def initialize(field_name, opts); end

  # Returns the value of attribute field_name.
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#48
  def field_name; end

  # Returns the value of attribute kind_of.
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#48
  def kind_of; end

  # source://kube-dsl//lib/kube-dsl/validations.rb#55
  def validate(obj, errors, nesting); end
end

# source://kube-dsl//lib/kube-dsl/validations.rb#161
module KubeDSL::Validations::ClassMethods
  # source://kube-dsl//lib/kube-dsl/validations.rb#162
  def validates(field_name, options); end

  # source://kube-dsl//lib/kube-dsl/validations.rb#185
  def validators; end
end

# source://kube-dsl//lib/kube-dsl/validations.rb#97
class KubeDSL::Validations::FieldValidator
  # @return [FieldValidator] a new instance of FieldValidator
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#100
  def initialize(field_name, options = T.unsafe(nil)); end

  # Returns the value of attribute field_name.
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#98
  def field_name; end

  # Returns the value of attribute format_validator.
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#98
  def format_validator; end

  # source://kube-dsl//lib/kube-dsl/validations.rb#105
  def validate(obj, errors, nesting); end
end

# source://kube-dsl//lib/kube-dsl/validations.rb#72
class KubeDSL::Validations::FormatValidator
  # @return [FormatValidator] a new instance of FormatValidator
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#75
  def initialize(format); end

  # Returns the value of attribute format.
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#73
  def format; end

  # source://kube-dsl//lib/kube-dsl/validations.rb#83
  def klasses; end

  # @return [Boolean]
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#79
  def valid?(obj); end
end

# source://kube-dsl//lib/kube-dsl/validations.rb#146
class KubeDSL::Validations::InclusionValidator
  # @return [InclusionValidator] a new instance of InclusionValidator
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#149
  def initialize(field_name, opts); end

  # Returns the value of attribute field_name.
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#147
  def field_name; end

  # Returns the value of attribute list.
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#147
  def list; end

  # source://kube-dsl//lib/kube-dsl/validations.rb#154
  def validate(obj, errors, nesting); end
end

# source://kube-dsl//lib/kube-dsl/validations.rb#190
module KubeDSL::Validations::InstanceMethods
  # @return [Boolean]
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#216
  def valid?; end

  # source://kube-dsl//lib/kube-dsl/validations.rb#191
  def validate(errors = T.unsafe(nil), nesting = T.unsafe(nil)); end

  # source://kube-dsl//lib/kube-dsl/validations.rb#206
  def validate!; end
end

# source://kube-dsl//lib/kube-dsl/validations.rb#127
class KubeDSL::Validations::KeyValueValidator
  # @return [KeyValueValidator] a new instance of KeyValueValidator
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#130
  def initialize(field_name, options = T.unsafe(nil)); end

  # Returns the value of attribute field_name.
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#128
  def field_name; end

  # Returns the value of attribute format_validator.
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#128
  def format_validator; end

  # source://kube-dsl//lib/kube-dsl/validations.rb#135
  def validate(obj, errors, nesting); end
end

# source://kube-dsl//lib/kube-dsl/validations.rb#112
class KubeDSL::Validations::ObjectValidator
  # @return [ObjectValidator] a new instance of ObjectValidator
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#115
  def initialize(field_name, opts); end

  # Returns the value of attribute field_name.
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#113
  def field_name; end

  # Returns the value of attribute kind_of.
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#113
  def kind_of; end

  # source://kube-dsl//lib/kube-dsl/validations.rb#120
  def validate(obj, errors, nesting); end
end

# source://kube-dsl//lib/kube-dsl/validations.rb#22
class KubeDSL::Validations::PresenceValidator
  # @return [PresenceValidator] a new instance of PresenceValidator
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#25
  def initialize(field_name, presence); end

  # Returns the value of attribute field_name.
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#23
  def field_name; end

  # Returns the value of attribute presence.
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#23
  def presence; end

  # source://kube-dsl//lib/kube-dsl/validations.rb#30
  def validate(obj, errors, nesting); end

  private

  # @return [Boolean]
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#38
  def obj_empty?(obj); end
end

# source://kube-dsl//lib/kube-dsl/validations.rb#5
class KubeDSL::Validations::ValidationErrors
  # @return [ValidationErrors] a new instance of ValidationErrors
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#8
  def initialize; end

  # source://kube-dsl//lib/kube-dsl/validations.rb#12
  def add(field_name, msg); end

  # @return [Boolean]
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#17
  def empty?; end

  # Returns the value of attribute messages.
  #
  # source://kube-dsl//lib/kube-dsl/validations.rb#6
  def messages; end
end

# source://kube-dsl//lib/kube-dsl/value_fields.rb#4
module KubeDSL::ValueFields
  class << self
    # @private
    #
    # source://kube-dsl//lib/kube-dsl/value_fields.rb#159
    def extended(base); end
  end
end

# source://kube-dsl//lib/kube-dsl/value_fields.rb#7
module KubeDSL::ValueFields::ClassMethods
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#104
  def __fields__; end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#60
  def array_field(field, accessor = T.unsafe(nil), &field_block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#43
  def key_value_field(field, format:); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#26
  def object_field(field, &field_block); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#12
  def value_field(field, default: T.unsafe(nil)); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#8
  def value_fields(*fields); end
end

# source://kube-dsl//lib/kube-dsl/value_fields.rb#5
class KubeDSL::ValueFields::ClassMismatchError < ::StandardError; end

# source://kube-dsl//lib/kube-dsl/value_fields.rb#115
module KubeDSL::ValueFields::InstanceMethods
  # source://kube-dsl//lib/kube-dsl/value_fields.rb#150
  def merge(other, fields); end

  # source://kube-dsl//lib/kube-dsl/value_fields.rb#116
  def merge!(other, fields: T.unsafe(nil)); end
end
