# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/kube-dsl/all/kube-dsl.rbi
#
# kube-dsl-0.6.1

module KubeDSL::Entrypoint
  def affinity(&block); end
  def aggregation_rule(&block); end
  def api_group(&block); end
  def api_group_list(&block); end
  def api_resource(&block); end
  def api_resource_list(&block); end
  def api_service(&block); end
  def api_service_condition(&block); end
  def api_service_list(&block); end
  def api_service_spec(&block); end
  def api_service_status(&block); end
  def api_versions(&block); end
  def attached_volume(&block); end
  def aws_elastic_block_store_volume_source(&block); end
  def azure_disk_volume_source(&block); end
  def azure_file_persistent_volume_source(&block); end
  def azure_file_volume_source(&block); end
  def binding(&block); end
  def bound_object_reference(&block); end
  def capabilities(&block); end
  def ceph_fs_persistent_volume_source(&block); end
  def ceph_fs_volume_source(&block); end
  def cinder_persistent_volume_source(&block); end
  def cinder_volume_source(&block); end
  def client_ip_config(&block); end
  def cluster_role(&block); end
  def cluster_role_binding(&block); end
  def cluster_role_binding_list(&block); end
  def cluster_role_list(&block); end
  def component_condition(&block); end
  def component_status(&block); end
  def component_status_list(&block); end
  def config_map(&block); end
  def config_map_env_source(&block); end
  def config_map_key_selector(&block); end
  def config_map_list(&block); end
  def config_map_node_config_source(&block); end
  def config_map_projection(&block); end
  def config_map_volume_source(&block); end
  def container(&block); end
  def container_image(&block); end
  def container_port(&block); end
  def container_state(&block); end
  def container_state_running(&block); end
  def container_state_terminated(&block); end
  def container_state_waiting(&block); end
  def container_status(&block); end
  def controller_revision(&block); end
  def controller_revision_list(&block); end
  def cross_version_object_reference(&block); end
  def csi_node(&block); end
  def csi_node_driver(&block); end
  def csi_node_list(&block); end
  def csi_node_spec(&block); end
  def csi_persistent_volume_source(&block); end
  def csi_volume_source(&block); end
  def custom_resource_column_definition(&block); end
  def custom_resource_conversion(&block); end
  def custom_resource_definition(&block); end
  def custom_resource_definition_condition(&block); end
  def custom_resource_definition_list(&block); end
  def custom_resource_definition_names(&block); end
  def custom_resource_definition_spec(&block); end
  def custom_resource_definition_status(&block); end
  def custom_resource_definition_version(&block); end
  def custom_resource_subresource_scale(&block); end
  def custom_resource_subresources(&block); end
  def custom_resource_validation(&block); end
  def daemon_endpoint(&block); end
  def daemon_set(&block); end
  def daemon_set_condition(&block); end
  def daemon_set_list(&block); end
  def daemon_set_spec(&block); end
  def daemon_set_status(&block); end
  def daemon_set_update_strategy(&block); end
  def delete_options(&block); end
  def deployment(&block); end
  def deployment_condition(&block); end
  def deployment_list(&block); end
  def deployment_spec(&block); end
  def deployment_status(&block); end
  def deployment_strategy(&block); end
  def downward_api_projection(&block); end
  def downward_api_volume_file(&block); end
  def downward_api_volume_source(&block); end
  def empty_dir_volume_source(&block); end
  def endpoint_address(&block); end
  def endpoint_port(&block); end
  def endpoint_subset(&block); end
  def endpoints(&block); end
  def endpoints_list(&block); end
  def env_from_source(&block); end
  def env_var(&block); end
  def env_var_source(&block); end
  def ephemeral_container(&block); end
  def event(&block); end
  def event_list(&block); end
  def event_series(&block); end
  def event_source(&block); end
  def exec_action(&block); end
  def external_documentation(&block); end
  def fc_volume_source(&block); end
  def flex_persistent_volume_source(&block); end
  def flex_volume_source(&block); end
  def flocker_volume_source(&block); end
  def gce_persistent_disk_volume_source(&block); end
  def git_repo_volume_source(&block); end
  def glusterfs_persistent_volume_source(&block); end
  def glusterfs_volume_source(&block); end
  def group_version_for_discovery(&block); end
  def handler(&block); end
  def horizontal_pod_autoscaler(&block); end
  def horizontal_pod_autoscaler_list(&block); end
  def horizontal_pod_autoscaler_spec(&block); end
  def horizontal_pod_autoscaler_status(&block); end
  def host_alias(&block); end
  def host_path_volume_source(&block); end
  def http_get_action(&block); end
  def http_header(&block); end
  def info(&block); end
  def ip_block(&block); end
  def iscsi_persistent_volume_source(&block); end
  def iscsi_volume_source(&block); end
  def job(&block); end
  def job_condition(&block); end
  def job_list(&block); end
  def job_spec(&block); end
  def job_status(&block); end
  def json_schema_props(&block); end
  def key_to_path(&block); end
  def label_selector(&block); end
  def label_selector_requirement(&block); end
  def lease(&block); end
  def lease_list(&block); end
  def lease_spec(&block); end
  def lifecycle(&block); end
  def limit_range(&block); end
  def limit_range_item(&block); end
  def limit_range_list(&block); end
  def limit_range_spec(&block); end
  def list_meta(&block); end
  def load_balancer_ingress(&block); end
  def load_balancer_status(&block); end
  def local_object_reference(&block); end
  def local_subject_access_review(&block); end
  def local_volume_source(&block); end
  def managed_fields_entry(&block); end
  def mutating_webhook(&block); end
  def mutating_webhook_configuration(&block); end
  def mutating_webhook_configuration_list(&block); end
  def namespace(&block); end
  def namespace_condition(&block); end
  def namespace_list(&block); end
  def namespace_spec(&block); end
  def namespace_status(&block); end
  def network_policy(&block); end
  def network_policy_egress_rule(&block); end
  def network_policy_ingress_rule(&block); end
  def network_policy_list(&block); end
  def network_policy_peer(&block); end
  def network_policy_port(&block); end
  def network_policy_spec(&block); end
  def nfs_volume_source(&block); end
  def node(&block); end
  def node_address(&block); end
  def node_affinity(&block); end
  def node_condition(&block); end
  def node_config_source(&block); end
  def node_config_status(&block); end
  def node_daemon_endpoints(&block); end
  def node_list(&block); end
  def node_selector(&block); end
  def node_selector_requirement(&block); end
  def node_selector_term(&block); end
  def node_spec(&block); end
  def node_status(&block); end
  def node_system_info(&block); end
  def non_resource_attributes(&block); end
  def non_resource_rule(&block); end
  def object_field_selector(&block); end
  def object_meta(&block); end
  def object_reference(&block); end
  def owner_reference(&block); end
  def persistent_volume(&block); end
  def persistent_volume_claim(&block); end
  def persistent_volume_claim_condition(&block); end
  def persistent_volume_claim_list(&block); end
  def persistent_volume_claim_spec(&block); end
  def persistent_volume_claim_status(&block); end
  def persistent_volume_claim_volume_source(&block); end
  def persistent_volume_list(&block); end
  def persistent_volume_spec(&block); end
  def persistent_volume_status(&block); end
  def photon_persistent_disk_volume_source(&block); end
  def pod(&block); end
  def pod_affinity(&block); end
  def pod_affinity_term(&block); end
  def pod_anti_affinity(&block); end
  def pod_condition(&block); end
  def pod_dns_config(&block); end
  def pod_dns_config_option(&block); end
  def pod_ip(&block); end
  def pod_list(&block); end
  def pod_readiness_gate(&block); end
  def pod_security_context(&block); end
  def pod_spec(&block); end
  def pod_status(&block); end
  def pod_template(&block); end
  def pod_template_list(&block); end
  def pod_template_spec(&block); end
  def policy_rule(&block); end
  def portworx_volume_source(&block); end
  def preconditions(&block); end
  def preferred_scheduling_term(&block); end
  def priority_class(&block); end
  def priority_class_list(&block); end
  def probe(&block); end
  def projected_volume_source(&block); end
  def quobyte_volume_source(&block); end
  def rbd_persistent_volume_source(&block); end
  def rbd_volume_source(&block); end
  def replica_set(&block); end
  def replica_set_condition(&block); end
  def replica_set_list(&block); end
  def replica_set_spec(&block); end
  def replica_set_status(&block); end
  def replication_controller(&block); end
  def replication_controller_condition(&block); end
  def replication_controller_list(&block); end
  def replication_controller_spec(&block); end
  def replication_controller_status(&block); end
  def resource_attributes(&block); end
  def resource_field_selector(&block); end
  def resource_quota(&block); end
  def resource_quota_list(&block); end
  def resource_quota_spec(&block); end
  def resource_quota_status(&block); end
  def resource_requirements(&block); end
  def resource_rule(&block); end
  def role(&block); end
  def role_binding(&block); end
  def role_binding_list(&block); end
  def role_list(&block); end
  def role_ref(&block); end
  def rolling_update_daemon_set(&block); end
  def rolling_update_deployment(&block); end
  def rolling_update_stateful_set_strategy(&block); end
  def rule_with_operations(&block); end
  def scale(&block); end
  def scale_io_persistent_volume_source(&block); end
  def scale_io_volume_source(&block); end
  def scale_spec(&block); end
  def scale_status(&block); end
  def scope_selector(&block); end
  def scoped_resource_selector_requirement(&block); end
  def se_linux_options(&block); end
  def secret(&block); end
  def secret_env_source(&block); end
  def secret_key_selector(&block); end
  def secret_list(&block); end
  def secret_projection(&block); end
  def secret_reference(&block); end
  def secret_volume_source(&block); end
  def security_context(&block); end
  def self_subject_access_review(&block); end
  def self_subject_access_review_spec(&block); end
  def self_subject_rules_review(&block); end
  def self_subject_rules_review_spec(&block); end
  def server_address_by_client_cidr(&block); end
  def service(&block); end
  def service_account(&block); end
  def service_account_list(&block); end
  def service_account_token_projection(&block); end
  def service_list(&block); end
  def service_port(&block); end
  def service_reference(&block); end
  def service_spec(&block); end
  def service_status(&block); end
  def session_affinity_config(&block); end
  def stateful_set(&block); end
  def stateful_set_condition(&block); end
  def stateful_set_list(&block); end
  def stateful_set_spec(&block); end
  def stateful_set_status(&block); end
  def stateful_set_update_strategy(&block); end
  def status(&block); end
  def status_cause(&block); end
  def status_details(&block); end
  def storage_class(&block); end
  def storage_class_list(&block); end
  def storage_os_persistent_volume_source(&block); end
  def storage_os_volume_source(&block); end
  def subject(&block); end
  def subject_access_review(&block); end
  def subject_access_review_spec(&block); end
  def subject_access_review_status(&block); end
  def subject_rules_review_status(&block); end
  def sysctl(&block); end
  def taint(&block); end
  def tcp_socket_action(&block); end
  def token_request(&block); end
  def token_request_spec(&block); end
  def token_request_status(&block); end
  def token_review(&block); end
  def token_review_spec(&block); end
  def token_review_status(&block); end
  def toleration(&block); end
  def topology_selector_label_requirement(&block); end
  def topology_selector_term(&block); end
  def topology_spread_constraint(&block); end
  def typed_local_object_reference(&block); end
  def user_info(&block); end
  def validating_webhook(&block); end
  def validating_webhook_configuration(&block); end
  def validating_webhook_configuration_list(&block); end
  def volume(&block); end
  def volume_attachment(&block); end
  def volume_attachment_list(&block); end
  def volume_attachment_source(&block); end
  def volume_attachment_spec(&block); end
  def volume_attachment_status(&block); end
  def volume_device(&block); end
  def volume_error(&block); end
  def volume_mount(&block); end
  def volume_node_affinity(&block); end
  def volume_node_resources(&block); end
  def volume_projection(&block); end
  def vsphere_virtual_disk_volume_source(&block); end
  def watch_event(&block); end
  def webhook_client_config(&block); end
  def webhook_conversion(&block); end
  def weighted_pod_affinity_term(&block); end
  def windows_security_context_options(&block); end
end
module KubeDSL
  extend KubeDSL::Entrypoint
end
